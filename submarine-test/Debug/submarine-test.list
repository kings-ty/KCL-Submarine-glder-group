
submarine-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007e64  08007e64  00008e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa8  08007fa8  00009158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fa8  08007fa8  00008fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb0  08007fb0  00009158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb0  08007fb0  00008fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fb4  08007fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08007fb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009158  2**0
                  CONTENTS
 10 .bss          00001d54  20000158  20000158  00009158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001eac  20001eac  00009158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd90  00000000  00000000  00009188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c3f  00000000  00000000  00016f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00019b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e7  00000000  00000000  0001a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002366f  00000000  00000000  0001b05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f282  00000000  00000000  0003e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6086  00000000  00000000  0004d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001139d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003798  00000000  00000000  00113a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001171b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e4c 	.word	0x08007e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	08007e4c 	.word	0x08007e4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirect printf to USB CDC
int _write(int file, char *ptr, int len)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)ptr, len);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	68b8      	ldr	r0, [r7, #8]
 80005b0:	f006 f864 	bl	800667c <CDC_Transmit_FS>
    return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fa7d 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f85d 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8c7 	bl	8000760 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f005 ff95 	bl	8006500 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  
  // Wait a bit for USB CDC to be ready
  HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f000 fae5 	bl	8000ba8 <HAL_Delay>
  
  printf("Hello World!\r\n");
 80005de:	4823      	ldr	r0, [pc, #140]	@ (800066c <main+0xac>)
 80005e0:	f006 fdd2 	bl	8007188 <puts>
  printf("STM32F407 USB CDC Printf Test\r\n");
 80005e4:	4822      	ldr	r0, [pc, #136]	@ (8000670 <main+0xb0>)
 80005e6:	f006 fdcf 	bl	8007188 <puts>
  printf("System Clock: %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
 80005ea:	f002 fb79 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4619      	mov	r1, r3
 80005f2:	4820      	ldr	r0, [pc, #128]	@ (8000674 <main+0xb4>)
 80005f4:	f006 fd60 	bl	80070b8 <iprintf>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t counter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // PB0과 PB1 모두 확실히 끄기
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PB0 강제 OFF
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	481d      	ldr	r0, [pc, #116]	@ (8000678 <main+0xb8>)
 8000602:	f000 fda3 	bl	800114c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // PB1 OFF
 8000606:	2200      	movs	r2, #0
 8000608:	2102      	movs	r1, #2
 800060a:	481b      	ldr	r0, [pc, #108]	@ (8000678 <main+0xb8>)
 800060c:	f000 fd9e 	bl	800114c <HAL_GPIO_WritePin>
    
    // PB1 단일 핀만 테스트
    printf("Counter: %lu - PB1 turning ON\r\n", counter++);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	4619      	mov	r1, r3
 8000618:	4818      	ldr	r0, [pc, #96]	@ (800067c <main+0xbc>)
 800061a:	f006 fd4d 	bl	80070b8 <iprintf>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // PB1 켜기
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0xb8>)
 8000624:	f000 fd92 	bl	800114c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062c:	f000 fabc 	bl	8000ba8 <HAL_Delay>
    
    printf("Counter: %lu - PB1 turning OFF\r\n", counter++);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	4619      	mov	r1, r3
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0xc0>)
 800063a:	f006 fd3d 	bl	80070b8 <iprintf>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // PB1 끄기
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	480d      	ldr	r0, [pc, #52]	@ (8000678 <main+0xb8>)
 8000644:	f000 fd82 	bl	800114c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064c:	f000 faac 	bl	8000ba8 <HAL_Delay>
    
    printf("Counter: %lu - All pins OFF for 1 second\r\n", counter++);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <main+0xc4>)
 800065a:	f006 fd2d 	bl	80070b8 <iprintf>
    HAL_Delay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000662:	f000 faa1 	bl	8000ba8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PB0 강제 OFF
 8000666:	bf00      	nop
 8000668:	e7c8      	b.n	80005fc <main+0x3c>
 800066a:	bf00      	nop
 800066c:	08007e64 	.word	0x08007e64
 8000670:	08007e74 	.word	0x08007e74
 8000674:	08007e94 	.word	0x08007e94
 8000678:	40020400 	.word	0x40020400
 800067c:	08007eac 	.word	0x08007eac
 8000680:	08007ecc 	.word	0x08007ecc
 8000684:	08007ef0 	.word	0x08007ef0

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	@ 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fe56 	bl	8007348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a28      	ldr	r2, [pc, #160]	@ (8000758 <SystemClock_Config+0xd0>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	@ (800075c <SystemClock_Config+0xd4>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000700:	230f      	movs	r3, #15
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000704:	2390      	movs	r3, #144	@ 0x90
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800070c:	2305      	movs	r3, #5
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 ff85 	bl	8002624 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000720:	f000 f8a4 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f9e8 	bl	8002b14 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074a:	f000 f88f 	bl	800086c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <MX_GPIO_Init+0x100>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a38      	ldr	r2, [pc, #224]	@ (8000860 <MX_GPIO_Init+0x100>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <MX_GPIO_Init+0x100>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b32      	ldr	r3, [pc, #200]	@ (8000860 <MX_GPIO_Init+0x100>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a31      	ldr	r2, [pc, #196]	@ (8000860 <MX_GPIO_Init+0x100>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a23      	ldr	r2, [pc, #140]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_GPIO_Init+0x100>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  
  // Configure LED pins for STM32F407VET6 board
  // User LED 1: PA6, User LED 2: PA7 (both are sink mode - LOW to turn on)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000802:	23c0      	movs	r3, #192	@ 0xc0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4812      	ldr	r0, [pc, #72]	@ (8000864 <MX_GPIO_Init+0x104>)
 800081a:	f000 fafb 	bl	8000e14 <HAL_GPIO_Init>
  
  // Turn off LEDs initially (HIGH = OFF for sink mode)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	21c0      	movs	r1, #192	@ 0xc0
 8000822:	4810      	ldr	r0, [pc, #64]	@ (8000864 <MX_GPIO_Init+0x104>)
 8000824:	f000 fc92 	bl	800114c <HAL_GPIO_WritePin>
  
  // Configure PB0 and PB1 to force control both
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000828:	2303      	movs	r3, #3
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480a      	ldr	r0, [pc, #40]	@ (8000868 <MX_GPIO_Init+0x108>)
 8000840:	f000 fae8 	bl	8000e14 <HAL_GPIO_Init>
  
  // Force turn off BOTH PB0 and PB1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Force PB0 OFF
 8000844:	2200      	movs	r2, #0
 8000846:	2101      	movs	r1, #1
 8000848:	4807      	ldr	r0, [pc, #28]	@ (8000868 <MX_GPIO_Init+0x108>)
 800084a:	f000 fc7f 	bl	800114c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Force PB1 OFF
 800084e:	2200      	movs	r2, #0
 8000850:	2102      	movs	r1, #2
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_GPIO_Init+0x108>)
 8000854:	f000 fc7a 	bl	800114c <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f923 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <OTG_FS_IRQHandler+0x10>)
 800092e:	f000 fd6a 	bl	8001406 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000165c 	.word	0x2000165c

0800093c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	e00a      	b.n	8000964 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800094e:	f3af 8000 	nop.w
 8000952:	4601      	mov	r1, r0
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	b2ca      	uxtb	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbf0      	blt.n	800094e <_read+0x12>
  }

  return len;
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800099e:	605a      	str	r2, [r3, #4]
  return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <_isatty>:

int _isatty(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f006 fce8 	bl	80073e4 <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	@ (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	20000174 	.word	0x20000174
 8000a48:	20001eb0 	.word	0x20001eb0

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a74:	f7ff ffea 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f006 fca7 	bl	80073f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd8d 	bl	80005c0 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000ab4:	08007fb8 	.word	0x08007fb8
  ldr r2, =_sbss
 8000ab8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000abc:	20001eac 	.word	0x20001eac

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f94f 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff febe 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f967 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b44:	f000 f92f 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000178 	.word	0x20000178

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000178 	.word	0x20000178

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	@ (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	@ (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	@ 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	@ 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e16b      	b.n	8001108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 815a 	bne.w	8001102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80b4 	beq.w	8001102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b60      	ldr	r3, [pc, #384]	@ (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b5d      	ldr	r3, [pc, #372]	@ (8001120 <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001124 <HAL_GPIO_Init+0x310>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <HAL_GPIO_Init+0x314>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d02b      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	@ (800112c <HAL_GPIO_Init+0x318>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a50      	ldr	r2, [pc, #320]	@ (8001130 <HAL_GPIO_Init+0x31c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_GPIO_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x21a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x216>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <HAL_GPIO_Init+0x328>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x212>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x32c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x20e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	@ (8001144 <HAL_GPIO_Init+0x330>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x20a>
 800101a:	2307      	movs	r3, #7
 800101c:	e00e      	b.n	800103c <HAL_GPIO_Init+0x228>
 800101e:	2308      	movs	r3, #8
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x228>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	@ (8001124 <HAL_GPIO_Init+0x310>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <HAL_GPIO_Init+0x334>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <HAL_GPIO_Init+0x334>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_GPIO_Init+0x334>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a27      	ldr	r2, [pc, #156]	@ (8001148 <HAL_GPIO_Init+0x334>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <HAL_GPIO_Init+0x334>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_GPIO_Init+0x334>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae90 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af02      	add	r7, sp, #8
 8001184:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e101      	b.n	8001394 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f005 fbae 	bl	800690c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2203      	movs	r2, #3
 80011b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011be:	d102      	bne.n	80011c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 ff71 	bl	80030b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7c1a      	ldrb	r2, [r3, #16]
 80011d8:	f88d 2000 	strb.w	r2, [sp]
 80011dc:	3304      	adds	r3, #4
 80011de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e0:	f001 fe50 	bl	8002e84 <USB_CoreInit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2202      	movs	r2, #2
 80011ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0ce      	b.n	8001394 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 ff69 	bl	80030d4 <USB_SetCurrentMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0bf      	b.n	8001394 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e04a      	b.n	80012b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3315      	adds	r3, #21
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3314      	adds	r3, #20
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	b298      	uxth	r0, r3
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	332e      	adds	r3, #46	@ 0x2e
 8001256:	4602      	mov	r2, r0
 8001258:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	3318      	adds	r3, #24
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	331c      	adds	r3, #28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	3320      	adds	r3, #32
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	3324      	adds	r3, #36	@ 0x24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	3301      	adds	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3af      	bcc.n	800121a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e044      	b.n	800134a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	3301      	adds	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	429a      	cmp	r2, r3
 8001352:	d3b5      	bcc.n	80012c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7c1a      	ldrb	r2, [r3, #16]
 800135c:	f88d 2000 	strb.w	r2, [sp]
 8001360:	3304      	adds	r3, #4
 8001362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001364:	f001 ff02 	bl	800316c <USB_DevInit>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2202      	movs	r2, #2
 8001372:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00c      	b.n	8001394 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 ff4c 	bl	800422a <USB_DevDisconnect>

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_PCD_Start+0x1c>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e022      	b.n	80013fe <HAL_PCD_Start+0x62>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d009      	beq.n	80013e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fe53 	bl	8003090 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fefa 	bl	80041e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b08d      	sub	sp, #52	@ 0x34
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f002 ffb8 	bl	8004392 <USB_GetMode>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	f040 848c 	bne.w	8001d42 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f002 ff1c 	bl	800426c <USB_ReadInterrupts>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8482 	beq.w	8001d40 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f002 ff09 	bl	800426c <USB_ReadInterrupts>
 800145a:	4603      	mov	r3, r0
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b02      	cmp	r3, #2
 8001462:	d107      	bne.n	8001474 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f002 0202 	and.w	r2, r2, #2
 8001472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fef7 	bl	800426c <USB_ReadInterrupts>
 800147e:	4603      	mov	r3, r0
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b10      	cmp	r3, #16
 8001486:	d161      	bne.n	800154c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0210 	bic.w	r2, r2, #16
 8001496:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f003 020f 	and.w	r2, r3, #15
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	3304      	adds	r3, #4
 80014b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80014be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014c2:	d124      	bne.n	800150e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d035      	beq.n	800153c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	6a38      	ldr	r0, [r7, #32]
 80014e4:	f002 fd2e 	bl	8003f44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f4:	441a      	add	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001506:	441a      	add	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	e016      	b.n	800153c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001514:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001518:	d110      	bne.n	800153c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001520:	2208      	movs	r2, #8
 8001522:	4619      	mov	r1, r3
 8001524:	6a38      	ldr	r0, [r7, #32]
 8001526:	f002 fd0d 	bl	8003f44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001536:	441a      	add	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0210 	orr.w	r2, r2, #16
 800154a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fe8b 	bl	800426c <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800155c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001560:	f040 80a7 	bne.w	80016b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fe90 	bl	8004292 <USB_ReadDevAllOutEpInterrupt>
 8001572:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001574:	e099      	b.n	80016aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 808e 	beq.w	800169e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f002 feb4 	bl	80042fa <USB_ReadDevOutEPInterrupt>
 8001592:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00c      	beq.n	80015b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015aa:	461a      	mov	r2, r3
 80015ac:	2301      	movs	r3, #1
 80015ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fea4 	bl	8002300 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00c      	beq.n	80015dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	015a      	lsls	r2, r3, #5
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ce:	461a      	mov	r2, r3
 80015d0:	2308      	movs	r3, #8
 80015d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 ff7a 	bl	80024d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015f2:	461a      	mov	r2, r3
 80015f4:	2310      	movs	r3, #16
 80015f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d030      	beq.n	8001664 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	2b80      	cmp	r3, #128	@ 0x80
 800160c:	d109      	bne.n	8001622 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800161c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001620:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
 8001636:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2200      	movs	r2, #0
 8001644:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f005 fa63 	bl	8006b18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800165e:	461a      	mov	r2, r3
 8001660:	2302      	movs	r3, #2
 8001662:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800167a:	461a      	mov	r2, r3
 800167c:	2320      	movs	r3, #32
 800167e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001696:	461a      	mov	r2, r3
 8001698:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f af62 	bne.w	8001576 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fdd8 	bl	800426c <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016c6:	f040 80db 	bne.w	8001880 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fdf9 	bl	80042c6 <USB_ReadDevAllInEpInterrupt>
 80016d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016da:	e0cd      	b.n	8001878 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80c2 	beq.w	800186c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fe1f 	bl	8004336 <USB_ReadDevInEPInterrupt>
 80016f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d057      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	2201      	movs	r2, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	69f9      	ldr	r1, [r7, #28]
 8001720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001724:	4013      	ands	r3, r2
 8001726:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	799b      	ldrb	r3, [r3, #6]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d132      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3320      	adds	r3, #32
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4403      	add	r3, r0
 8001762:	331c      	adds	r3, #28
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4419      	add	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	3320      	adds	r3, #32
 8001778:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	2b00      	cmp	r3, #0
 800177e:	d113      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x3a2>
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3324      	adds	r3, #36	@ 0x24
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017a0:	461a      	mov	r2, r3
 80017a2:	2101      	movs	r1, #1
 80017a4:	f002 fe26 	bl	80043f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f005 f92d 	bl	8006a0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ca:	461a      	mov	r2, r3
 80017cc:	2308      	movs	r3, #8
 80017ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017e6:	461a      	mov	r2, r3
 80017e8:	2310      	movs	r3, #16
 80017ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001802:	461a      	mov	r2, r3
 8001804:	2340      	movs	r3, #64	@ 0x40
 8001806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d023      	beq.n	800185a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001812:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001814:	6a38      	ldr	r0, [r7, #32]
 8001816:	f001 fe0d 	bl	8003434 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800181a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	3310      	adds	r3, #16
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	3304      	adds	r3, #4
 800182c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f005 f97a 	bl	8006b3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001854:	461a      	mov	r2, r3
 8001856:	2302      	movs	r3, #2
 8001858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fcbd 	bl	80021e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	3301      	adds	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f af2e 	bne.w	80016dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fcf1 	bl	800426c <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001894:	d122      	bne.n	80018dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018bc:	2100      	movs	r1, #0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fea4 	bl	800260c <HAL_PCDEx_LPM_Callback>
 80018c4:	e002      	b.n	80018cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f005 f918 	bl	8006afc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fcc3 	bl	800426c <USB_ReadInterrupts>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f0:	d112      	bne.n	8001918 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f005 f8d4 	bl	8006ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001916:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fca5 	bl	800426c <USB_ReadInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800192c:	f040 80b7 	bne.w	8001a9e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2110      	movs	r1, #16
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fd72 	bl	8003434 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001954:	e046      	b.n	80019e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001962:	461a      	mov	r2, r3
 8001964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001968:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800196a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196c:	015a      	lsls	r2, r3, #5
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	4413      	add	r3, r2
 8001972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800197a:	0151      	lsls	r1, r2, #5
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	440a      	add	r2, r1
 8001980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001984:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001988:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001996:	461a      	mov	r2, r3
 8001998:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800199c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800199e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ae:	0151      	lsls	r1, r2, #5
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	440a      	add	r2, r1
 80019b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ce:	0151      	lsls	r1, r2, #5
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	440a      	add	r2, r1
 80019d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e0:	3301      	adds	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	461a      	mov	r2, r3
 80019ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d3b2      	bcc.n	8001956 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7bdb      	ldrb	r3, [r3, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d016      	beq.n	8001a3a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a1c:	f043 030b 	orr.w	r3, r3, #11
 8001a20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a32:	f043 030b 	orr.w	r3, r3, #11
 8001a36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a38:	e015      	b.n	8001a66 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a4c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a60:	f043 030b 	orr.w	r3, r3, #11
 8001a64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a74:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f002 fcb3 	bl	80043f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fbe2 	bl	800426c <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ab2:	d123      	bne.n	8001afc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fc78 	bl	80043ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fd2f 	bl	8003526 <USB_GetDevSpeed>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	f001 f9ca 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8001ad8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f001 fa33 	bl	8002f4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f004 ffb9 	bl	8006a5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fbb3 	bl	800426c <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d10a      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f004 ff96 	bl	8006a42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f002 0208 	and.w	r2, r2, #8
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fb9e 	bl	800426c <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b36:	2b80      	cmp	r3, #128	@ 0x80
 8001b38:	d123      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4a:	e014      	b.n	8001b76 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fb0a 	bl	8002184 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	3301      	adds	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	791b      	ldrb	r3, [r3, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d3e4      	bcc.n	8001b4c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fb70 	bl	800426c <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b96:	d13c      	bne.n	8001c12 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	e02b      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d115      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da12      	bge.n	8001bf0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3317      	adds	r3, #23
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 faca 	bl	8002184 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	791b      	ldrb	r3, [r3, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d3cd      	bcc.n	8001b9e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fb28 	bl	800426c <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c26:	d156      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2c:	e045      	b.n	8001cba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d12e      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da2b      	bge.n	8001cb4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	0c1a      	lsrs	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c66:	4053      	eors	r3, r2
 8001c68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d121      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb0:	6053      	str	r3, [r2, #4]
            break;
 8001cb2:	e008      	b.n	8001cc6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	791b      	ldrb	r3, [r3, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d3b3      	bcc.n	8001c2e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fac6 	bl	800426c <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cea:	d10a      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f004 ff37 	bl	8006b60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fab0 	bl	800426c <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d115      	bne.n	8001d42 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f004 ff27 	bl	8006b7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	e000      	b.n	8001d42 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d40:	bf00      	nop
    }
  }
}
 8001d42:	3734      	adds	r7, #52	@ 0x34
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}

08001d48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_PCD_SetAddress+0x1a>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e012      	b.n	8001d88 <HAL_PCD_SetAddress+0x40>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fa0f 	bl	800419c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	460b      	mov	r3, r1
 8001da4:	803b      	strh	r3, [r7, #0]
 8001da6:	4613      	mov	r3, r2
 8001da8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da0f      	bge.n	8001dd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	3310      	adds	r3, #16
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	705a      	strb	r2, [r3, #1]
 8001dd4:	e00f      	b.n	8001df6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001e02:	883b      	ldrh	r3, [r7, #0]
 8001e04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	78ba      	ldrb	r2, [r7, #2]
 8001e10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e24:	78bb      	ldrb	r3, [r7, #2]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d102      	bne.n	8001e30 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_PCD_EP_Open+0xae>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e00e      	b.n	8001e5c <HAL_PCD_EP_Open+0xcc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68f9      	ldr	r1, [r7, #12]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fb8f 	bl	8003570 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da0f      	bge.n	8001e98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	3310      	adds	r3, #16
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	705a      	strb	r2, [r3, #1]
 8001e96:	e00f      	b.n	8001eb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_PCD_EP_Close+0x6e>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e00e      	b.n	8001ef0 <HAL_PCD_EP_Close+0x8c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68f9      	ldr	r1, [r7, #12]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fbcd 	bl	8003680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	460b      	mov	r3, r1
 8001f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	f003 020f 	and.w	r2, r3, #15
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3304      	adds	r3, #4
 8001f20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2200      	movs	r2, #0
 8001f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	799b      	ldrb	r3, [r3, #6]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	799b      	ldrb	r3, [r3, #6]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	f001 fc6a 	bl	8003838 <USB_EPStartXfer>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f90:	681b      	ldr	r3, [r3, #0]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	460b      	mov	r3, r1
 8001fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	7afb      	ldrb	r3, [r7, #11]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3310      	adds	r3, #16
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	799b      	ldrb	r3, [r3, #6]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	799b      	ldrb	r3, [r3, #6]
 8002000:	461a      	mov	r2, r3
 8002002:	6979      	ldr	r1, [r7, #20]
 8002004:	f001 fc18 	bl	8003838 <USB_EPStartXfer>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	7912      	ldrb	r2, [r2, #4]
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e04f      	b.n	80020d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3310      	adds	r3, #16
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00d      	b.n	8002074 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_PCD_EP_SetStall+0x82>
 8002090:	2302      	movs	r3, #2
 8002092:	e01d      	b.n	80020d0 <HAL_PCD_EP_SetStall+0xbe>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 ffa6 	bl	8003ff4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7999      	ldrb	r1, [r3, #6]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020c0:	461a      	mov	r2, r3
 80020c2:	f002 f997 	bl	80043f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	7912      	ldrb	r2, [r2, #4]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e042      	b.n	800217c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0f      	bge.n	800211e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	3310      	adds	r3, #16
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	705a      	strb	r2, [r3, #1]
 800211c:	e00f      	b.n	800213e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	b2da      	uxtb	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_PCD_EP_ClrStall+0x86>
 800215a:	2302      	movs	r3, #2
 800215c:	e00e      	b.n	800217c <HAL_PCD_EP_ClrStall+0xa4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68f9      	ldr	r1, [r7, #12]
 800216c:	4618      	mov	r0, r3
 800216e:	f001 ffaf 	bl	80040d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0c      	bge.n	80021b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 020f 	and.w	r2, r3, #15
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	3310      	adds	r3, #16
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e00c      	b.n	80021cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 020f 	and.w	r2, r3, #15
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 fdce 	bl	8003d74 <USB_EPStopXfer>
 80021d8:	4603      	mov	r3, r0
 80021da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021dc:	7afb      	ldrb	r3, [r7, #11]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b08a      	sub	sp, #40	@ 0x28
 80021ea:	af02      	add	r7, sp, #8
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3310      	adds	r3, #16
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d901      	bls.n	800221e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	d902      	bls.n	800223a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3303      	adds	r3, #3
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002242:	e02a      	b.n	800229a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	429a      	cmp	r2, r3
 8002258:	d902      	bls.n	8002260 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3303      	adds	r3, #3
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4603      	mov	r3, r0
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f001 fe23 	bl	8003ec8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	441a      	add	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	441a      	add	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d809      	bhi.n	80022c4 <PCD_WriteEmptyTxFifo+0xde>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d203      	bcs.n	80022c4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1bf      	bne.n	8002244 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d811      	bhi.n	80022f4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	2201      	movs	r2, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80022f0:	4013      	ands	r3, r2
 80022f2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	333c      	adds	r3, #60	@ 0x3c
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	799b      	ldrb	r3, [r3, #6]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d17b      	bne.n	800242e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	4a61      	ldr	r2, [pc, #388]	@ (80024c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f240 80b9 	bls.w	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80b3 	beq.w	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002368:	6093      	str	r3, [r2, #8]
 800236a:	e0a7      	b.n	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002382:	461a      	mov	r2, r3
 8002384:	2320      	movs	r3, #32
 8002386:	6093      	str	r3, [r2, #8]
 8002388:	e098      	b.n	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 8093 	bne.w	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a4b      	ldr	r2, [pc, #300]	@ (80024c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d90f      	bls.n	80023be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023b4:	461a      	mov	r2, r3
 80023b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ba:	6093      	str	r3, [r2, #8]
 80023bc:	e07e      	b.n	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	440b      	add	r3, r1
 80023e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d114      	bne.n	8002420 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002408:	461a      	mov	r2, r3
 800240a:	2101      	movs	r1, #1
 800240c:	f001 fff2 	bl	80043f4 <USB_EP0_OutStart>
 8002410:	e006      	b.n	8002420 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	441a      	add	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f004 fad6 	bl	80069d8 <HAL_PCD_DataOutStageCallback>
 800242c:	e046      	b.n	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4a26      	ldr	r2, [pc, #152]	@ (80024cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d124      	bne.n	8002480 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	e032      	b.n	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2320      	movs	r3, #32
 8002470:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f004 faad 	bl	80069d8 <HAL_PCD_DataOutStageCallback>
 800247e:	e01d      	b.n	80024bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d114      	bne.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024a8:	461a      	mov	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	f001 ffa2 	bl	80043f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f004 fa8e 	bl	80069d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	4f54300a 	.word	0x4f54300a
 80024cc:	4f54310a 	.word	0x4f54310a

080024d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	333c      	adds	r3, #60	@ 0x3c
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <PCD_EP_OutSetupPacket_int+0x88>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d90e      	bls.n	8002524 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002522:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f004 fa45 	bl	80069b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <PCD_EP_OutSetupPacket_int+0x88>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d90c      	bls.n	800254c <PCD_EP_OutSetupPacket_int+0x7c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	799b      	ldrb	r3, [r3, #6]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d108      	bne.n	800254c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002544:	461a      	mov	r2, r3
 8002546:	2101      	movs	r1, #1
 8002548:	f001 ff54 	bl	80043f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	4f54300a 	.word	0x4f54300a

0800255c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
 8002568:	4613      	mov	r3, r2
 800256a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800257a:	883b      	ldrh	r3, [r7, #0]
 800257c:	0419      	lsls	r1, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	430a      	orrs	r2, r1
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
 8002588:	e028      	b.n	80025dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e00d      	b.n	80025ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	3340      	adds	r3, #64	@ 0x40
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	3b01      	subs	r3, #1
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3ec      	bcc.n	800259e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025c4:	883b      	ldrh	r3, [r7, #0]
 80025c6:	0418      	lsls	r0, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4302      	orrs	r2, r0
 80025d4:	3340      	adds	r3, #64	@ 0x40
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e267      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d075      	beq.n	800272e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002642:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d00c      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b85      	ldr	r3, [pc, #532]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002656:	2b08      	cmp	r3, #8
 8002658:	d112      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b82      	ldr	r3, [pc, #520]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b7e      	ldr	r3, [pc, #504]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05b      	beq.n	800272c <HAL_RCC_OscConfig+0x108>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d157      	bne.n	800272c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e242      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x74>
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a75      	ldr	r2, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01d      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b70      	ldr	r3, [pc, #448]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 80026bc:	4b69      	ldr	r3, [pc, #420]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a68      	ldr	r2, [pc, #416]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a65      	ldr	r2, [pc, #404]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fa58 	bl	8000b90 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fa54 	bl	8000b90 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e207      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xc0>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fa44 	bl	8000b90 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fa40 	bl	8000b90 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1f3      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	4b51      	ldr	r3, [pc, #324]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0xe8>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800273a:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800274e:	2b08      	cmp	r3, #8
 8002750:	d11c      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b44      	ldr	r3, [pc, #272]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1c7      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4937      	ldr	r1, [pc, #220]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	e03a      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_OscConfig+0x244>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe f9f9 	bl	8000b90 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe f9f5 	bl	8000b90 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1a8      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4925      	ldr	r1, [pc, #148]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_OscConfig+0x244>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe f9d8 	bl	8000b90 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe f9d4 	bl	8000b90 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e187      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d036      	beq.n	800287c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_RCC_OscConfig+0x248>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe f9b8 	bl	8000b90 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe f9b4 	bl	8000b90 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e167      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x200>
 8002842:	e01b      	b.n	800287c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_RCC_OscConfig+0x248>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe f9a1 	bl	8000b90 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	e00e      	b.n	8002870 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002852:	f7fe f99d 	bl	8000b90 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d907      	bls.n	8002870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e150      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
 8002864:	40023800 	.word	0x40023800
 8002868:	42470000 	.word	0x42470000
 800286c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002870:	4b88      	ldr	r3, [pc, #544]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ea      	bne.n	8002852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8097 	beq.w	80029b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288e:	4b81      	ldr	r3, [pc, #516]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b77      	ldr	r3, [pc, #476]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4b74      	ldr	r3, [pc, #464]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a73      	ldr	r2, [pc, #460]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe f95d 	bl	8000b90 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe f959 	bl	8000b90 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e10c      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x2ea>
 8002900:	4b64      	ldr	r3, [pc, #400]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a63      	ldr	r2, [pc, #396]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
 800290c:	e01c      	b.n	8002948 <HAL_RCC_OscConfig+0x324>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x30c>
 8002916:	4b5f      	ldr	r3, [pc, #380]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	4b5c      	ldr	r3, [pc, #368]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	4a5b      	ldr	r2, [pc, #364]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6713      	str	r3, [r2, #112]	@ 0x70
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x324>
 8002930:	4b58      	ldr	r3, [pc, #352]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a57      	ldr	r2, [pc, #348]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
 800293c:	4b55      	ldr	r3, [pc, #340]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a54      	ldr	r2, [pc, #336]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe f91e 	bl	8000b90 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe f91a 	bl	8000b90 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0cb      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RCC_OscConfig+0x334>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7fe f908 	bl	8000b90 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe f904 	bl	8000b90 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0b5      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ee      	bne.n	8002984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b39      	ldr	r3, [pc, #228]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	4a38      	ldr	r2, [pc, #224]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a1 	beq.w	8002b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c2:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d05c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d141      	bne.n	8002a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b31      	ldr	r3, [pc, #196]	@ (8002a9c <HAL_RCC_OscConfig+0x478>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe f8d8 	bl	8000b90 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe f8d4 	bl	8000b90 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e087      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	491b      	ldr	r1, [pc, #108]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_RCC_OscConfig+0x478>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe f8ad 	bl	8000b90 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe f8a9 	bl	8000b90 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e05c      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x416>
 8002a58:	e054      	b.n	8002b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <HAL_RCC_OscConfig+0x478>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe f896 	bl	8000b90 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe f892 	bl	8000b90 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e045      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x444>
 8002a86:	e03d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e038      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x4ec>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d028      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d121      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d11a      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d111      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0cc      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d90c      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b65      	ldr	r3, [pc, #404]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0b8      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b68:	4b59      	ldr	r3, [pc, #356]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a58      	ldr	r2, [pc, #352]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b80:	4b53      	ldr	r3, [pc, #332]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	494d      	ldr	r1, [pc, #308]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d044      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d119      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e067      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4934      	ldr	r1, [pc, #208]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fd ffc4 	bl	8000b90 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fd ffc0 	bl	8000b90 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d20c      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e032      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4916      	ldr	r1, [pc, #88]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	490e      	ldr	r1, [pc, #56]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9a:	f000 f821 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	490a      	ldr	r1, [pc, #40]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd ff24 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023c00 	.word	0x40023c00
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	08007f64 	.word	0x08007f64
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000004 	.word	0x20000004

08002ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b090      	sub	sp, #64	@ 0x40
 8002ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d00d      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x40>
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	f200 80a1 	bhi.w	8002e4c <HAL_RCC_GetSysClockFreq+0x16c>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d12:	e09b      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d14:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d18:	e09b      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1a:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d1e:	e098      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d20:	4b4f      	ldr	r3, [pc, #316]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d028      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d4c:	fb03 f201 	mul.w	r2, r3, r1
 8002d50:	2300      	movs	r3, #0
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	4a43      	ldr	r2, [pc, #268]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d60:	460a      	mov	r2, r1
 8002d62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d66:	4413      	add	r3, r2
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	61fa      	str	r2, [r7, #28]
 8002d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d7a:	f7fd fa79 	bl	8000270 <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4613      	mov	r3, r2
 8002d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d86:	e053      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d88:	4b35      	ldr	r3, [pc, #212]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	2200      	movs	r2, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	617a      	str	r2, [r7, #20]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d9a:	f04f 0b00 	mov.w	fp, #0
 8002d9e:	4652      	mov	r2, sl
 8002da0:	465b      	mov	r3, fp
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	0159      	lsls	r1, r3, #5
 8002dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db0:	0150      	lsls	r0, r2, #5
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	ebb2 080a 	subs.w	r8, r2, sl
 8002dba:	eb63 090b 	sbc.w	r9, r3, fp
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002dd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	00eb      	lsls	r3, r5, #3
 8002de4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de8:	00e2      	lsls	r2, r4, #3
 8002dea:	4614      	mov	r4, r2
 8002dec:	461d      	mov	r5, r3
 8002dee:	eb14 030a 	adds.w	r3, r4, sl
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	eb45 030b 	adc.w	r3, r5, fp
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e06:	4629      	mov	r1, r5
 8002e08:	028b      	lsls	r3, r1, #10
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e10:	4621      	mov	r1, r4
 8002e12:	028a      	lsls	r2, r1, #10
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	60fa      	str	r2, [r7, #12]
 8002e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e24:	f7fd fa24 	bl	8000270 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3740      	adds	r7, #64	@ 0x40
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	017d7840 	.word	0x017d7840

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000

08002e84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e84:	b084      	sub	sp, #16
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	f107 001c 	add.w	r0, r7, #28
 8002e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d123      	bne.n	8002ee6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 fae8 	bl	80044b0 <USB_CoreReset>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e01b      	b.n	8002f1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f001 fadc 	bl	80044b0 <USB_CoreReset>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002efc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f10:	e005      	b.n	8002f1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f1e:	7fbb      	ldrb	r3, [r7, #30]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f043 0206 	orr.w	r2, r3, #6
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f48:	b004      	add	sp, #16
 8002f4a:	4770      	bx	lr

08002f4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d165      	bne.n	800302c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4a41      	ldr	r2, [pc, #260]	@ (8003068 <USB_SetTurnaroundTime+0x11c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d906      	bls.n	8002f76 <USB_SetTurnaroundTime+0x2a>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4a40      	ldr	r2, [pc, #256]	@ (800306c <USB_SetTurnaroundTime+0x120>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d202      	bcs.n	8002f76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f70:	230f      	movs	r3, #15
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e062      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4a3c      	ldr	r2, [pc, #240]	@ (800306c <USB_SetTurnaroundTime+0x120>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d306      	bcc.n	8002f8c <USB_SetTurnaroundTime+0x40>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4a3b      	ldr	r2, [pc, #236]	@ (8003070 <USB_SetTurnaroundTime+0x124>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d202      	bcs.n	8002f8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f86:	230e      	movs	r3, #14
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e057      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <USB_SetTurnaroundTime+0x124>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d306      	bcc.n	8002fa2 <USB_SetTurnaroundTime+0x56>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4a37      	ldr	r2, [pc, #220]	@ (8003074 <USB_SetTurnaroundTime+0x128>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d202      	bcs.n	8002fa2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f9c:	230d      	movs	r3, #13
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e04c      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4a33      	ldr	r2, [pc, #204]	@ (8003074 <USB_SetTurnaroundTime+0x128>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d306      	bcc.n	8002fb8 <USB_SetTurnaroundTime+0x6c>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4a32      	ldr	r2, [pc, #200]	@ (8003078 <USB_SetTurnaroundTime+0x12c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d802      	bhi.n	8002fb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e041      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4a2f      	ldr	r2, [pc, #188]	@ (8003078 <USB_SetTurnaroundTime+0x12c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d906      	bls.n	8002fce <USB_SetTurnaroundTime+0x82>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <USB_SetTurnaroundTime+0x130>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d802      	bhi.n	8002fce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002fc8:	230b      	movs	r3, #11
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e036      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800307c <USB_SetTurnaroundTime+0x130>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d906      	bls.n	8002fe4 <USB_SetTurnaroundTime+0x98>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	@ (8003080 <USB_SetTurnaroundTime+0x134>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d802      	bhi.n	8002fe4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002fde:	230a      	movs	r3, #10
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e02b      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4a26      	ldr	r2, [pc, #152]	@ (8003080 <USB_SetTurnaroundTime+0x134>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d906      	bls.n	8002ffa <USB_SetTurnaroundTime+0xae>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4a25      	ldr	r2, [pc, #148]	@ (8003084 <USB_SetTurnaroundTime+0x138>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d202      	bcs.n	8002ffa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ff4:	2309      	movs	r3, #9
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e020      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <USB_SetTurnaroundTime+0x138>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d306      	bcc.n	8003010 <USB_SetTurnaroundTime+0xc4>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4a20      	ldr	r2, [pc, #128]	@ (8003088 <USB_SetTurnaroundTime+0x13c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800300a:	2308      	movs	r3, #8
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e015      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <USB_SetTurnaroundTime+0x13c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d906      	bls.n	8003026 <USB_SetTurnaroundTime+0xda>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4a1c      	ldr	r2, [pc, #112]	@ (800308c <USB_SetTurnaroundTime+0x140>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d202      	bcs.n	8003026 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003020:	2307      	movs	r3, #7
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e00a      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003026:	2306      	movs	r3, #6
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e007      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003032:	2309      	movs	r3, #9
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e001      	b.n	800303c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003038:	2309      	movs	r3, #9
 800303a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	029b      	lsls	r3, r3, #10
 8003050:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	00d8acbf 	.word	0x00d8acbf
 800306c:	00e4e1c0 	.word	0x00e4e1c0
 8003070:	00f42400 	.word	0x00f42400
 8003074:	01067380 	.word	0x01067380
 8003078:	011a499f 	.word	0x011a499f
 800307c:	01312cff 	.word	0x01312cff
 8003080:	014ca43f 	.word	0x014ca43f
 8003084:	016e3600 	.word	0x016e3600
 8003088:	01a6ab1f 	.word	0x01a6ab1f
 800308c:	01e84800 	.word	0x01e84800

08003090 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 0201 	bic.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d115      	bne.n	8003122 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003102:	200a      	movs	r0, #10
 8003104:	f7fd fd50 	bl	8000ba8 <HAL_Delay>
      ms += 10U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	330a      	adds	r3, #10
 800310c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f001 f93f 	bl	8004392 <USB_GetMode>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d01e      	beq.n	8003158 <USB_SetCurrentMode+0x84>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2bc7      	cmp	r3, #199	@ 0xc7
 800311e:	d9f0      	bls.n	8003102 <USB_SetCurrentMode+0x2e>
 8003120:	e01a      	b.n	8003158 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d115      	bne.n	8003154 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003134:	200a      	movs	r0, #10
 8003136:	f7fd fd37 	bl	8000ba8 <HAL_Delay>
      ms += 10U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	330a      	adds	r3, #10
 800313e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f001 f926 	bl	8004392 <USB_GetMode>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <USB_SetCurrentMode+0x84>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003150:	d9f0      	bls.n	8003134 <USB_SetCurrentMode+0x60>
 8003152:	e001      	b.n	8003158 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e005      	b.n	8003164 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2bc8      	cmp	r3, #200	@ 0xc8
 800315c:	d101      	bne.n	8003162 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800316c:	b084      	sub	sp, #16
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800317a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e009      	b.n	80031a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3340      	adds	r3, #64	@ 0x40
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	2200      	movs	r2, #0
 8003198:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3301      	adds	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b0e      	cmp	r3, #14
 80031a4:	d9f2      	bls.n	800318c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11c      	bne.n	80031e8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80031e6:	e00b      	b.n	8003200 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003206:	461a      	mov	r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800320c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10d      	bne.n	8003230 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f968 	bl	80034f4 <USB_SetDevSpeed>
 8003224:	e008      	b.n	8003238 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003226:	2101      	movs	r1, #1
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f963 	bl	80034f4 <USB_SetDevSpeed>
 800322e:	e003      	b.n	8003238 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003230:	2103      	movs	r1, #3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f95e 	bl	80034f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003238:	2110      	movs	r1, #16
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f8fa 	bl	8003434 <USB_FlushTxFifo>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f924 	bl	8003498 <USB_FlushRxFifo>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003260:	461a      	mov	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326c:	461a      	mov	r2, r3
 800326e:	2300      	movs	r3, #0
 8003270:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003278:	461a      	mov	r2, r3
 800327a:	2300      	movs	r3, #0
 800327c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e043      	b.n	800330c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003296:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800329a:	d118      	bne.n	80032ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ae:	461a      	mov	r2, r3
 80032b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e013      	b.n	80032e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032c4:	461a      	mov	r2, r3
 80032c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e008      	b.n	80032e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032da:	461a      	mov	r2, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ec:	461a      	mov	r2, r3
 80032ee:	2300      	movs	r3, #0
 80032f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fe:	461a      	mov	r2, r3
 8003300:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003304:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003310:	461a      	mov	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4293      	cmp	r3, r2
 8003316:	d3b5      	bcc.n	8003284 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e043      	b.n	80033a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003334:	d118      	bne.n	8003368 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	e013      	b.n	800337a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800335e:	461a      	mov	r2, r3
 8003360:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e008      	b.n	800337a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003374:	461a      	mov	r2, r3
 8003376:	2300      	movs	r3, #0
 8003378:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003386:	461a      	mov	r2, r3
 8003388:	2300      	movs	r3, #0
 800338a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003398:	461a      	mov	r2, r3
 800339a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800339e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	3301      	adds	r3, #1
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033aa:	461a      	mov	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d3b5      	bcc.n	800331e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80033d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <USB_DevInit+0x2c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f043 0208 	orr.w	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003408:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800342c:	b004      	add	sp, #16
 800342e:	4770      	bx	lr
 8003430:	803c3800 	.word	0x803c3800

08003434 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800344e:	d901      	bls.n	8003454 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e01b      	b.n	800348c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	daf2      	bge.n	8003442 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	019b      	lsls	r3, r3, #6
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003478:	d901      	bls.n	800347e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e006      	b.n	800348c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d0f0      	beq.n	800346c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034b0:	d901      	bls.n	80034b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e018      	b.n	80034e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	daf2      	bge.n	80034a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2210      	movs	r2, #16
 80034c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034d4:	d901      	bls.n	80034da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e006      	b.n	80034e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d0f0      	beq.n	80034c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003526:	b480      	push	{r7}
 8003528:	b087      	sub	sp, #28
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0306 	and.w	r3, r3, #6
 800353e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
 800354a:	e00a      	b.n	8003562 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d002      	beq.n	8003558 <USB_GetDevSpeed+0x32>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d102      	bne.n	800355e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003558:	2302      	movs	r3, #2
 800355a:	75fb      	strb	r3, [r7, #23]
 800355c:	e001      	b.n	8003562 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800355e:	230f      	movs	r3, #15
 8003560:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d13a      	bne.n	8003602 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d155      	bne.n	8003670 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	059b      	lsls	r3, r3, #22
 80035e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035e8:	4313      	orrs	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e036      	b.n	8003670 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003620:	4313      	orrs	r3, r2
 8003622:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11a      	bne.n	8003670 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	791b      	ldrb	r3, [r3, #4]
 8003654:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003656:	430b      	orrs	r3, r1
 8003658:	4313      	orrs	r3, r2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	440a      	add	r2, r1
 8003662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d161      	bne.n	8003760 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036b2:	d11f      	bne.n	80036f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003714:	4013      	ands	r3, r2
 8003716:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003738:	4013      	ands	r3, r2
 800373a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	0159      	lsls	r1, r3, #5
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	440b      	add	r3, r1
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	4619      	mov	r1, r3
 8003758:	4b35      	ldr	r3, [pc, #212]	@ (8003830 <USB_DeactivateEndpoint+0x1b0>)
 800375a:	4013      	ands	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
 800375e:	e060      	b.n	8003822 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003772:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003776:	d11f      	bne.n	80037b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	0151      	lsls	r1, r2, #5
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	440a      	add	r2, r1
 800378e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003792:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003796:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	43db      	mvns	r3, r3
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037d8:	4013      	ands	r3, r2
 80037da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	43db      	mvns	r3, r3
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037fc:	4013      	ands	r3, r2
 80037fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	0159      	lsls	r1, r3, #5
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	440b      	add	r3, r1
 8003816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381a:	4619      	mov	r1, r3
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <USB_DeactivateEndpoint+0x1b4>)
 800381e:	4013      	ands	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	ec337800 	.word	0xec337800
 8003834:	eff37800 	.word	0xeff37800

08003838 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 817f 	bne.w	8003b58 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d132      	bne.n	80038c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800387c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003880:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038c0:	0cdb      	lsrs	r3, r3, #19
 80038c2:	04db      	lsls	r3, r3, #19
 80038c4:	6113      	str	r3, [r2, #16]
 80038c6:	e097      	b.n	80039f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038e2:	0cdb      	lsrs	r3, r3, #19
 80038e4:	04db      	lsls	r3, r3, #19
 80038e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	0151      	lsls	r1, r2, #5
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	440a      	add	r2, r1
 80038fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003902:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003906:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800390a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11a      	bne.n	8003948 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d903      	bls.n	8003926 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	440a      	add	r2, r1
 800393c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003940:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003944:	6113      	str	r3, [r2, #16]
 8003946:	e044      	b.n	80039d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4413      	add	r3, r2
 8003952:	1e5a      	subs	r2, r3, #1
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	8afb      	ldrh	r3, [r7, #22]
 800396e:	04d9      	lsls	r1, r3, #19
 8003970:	4ba4      	ldr	r3, [pc, #656]	@ (8003c04 <USB_EPStartXfer+0x3cc>)
 8003972:	400b      	ands	r3, r1
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	0148      	lsls	r0, r1, #5
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	4401      	add	r1, r0
 800397c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d122      	bne.n	80039d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80039aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	8afb      	ldrh	r3, [r7, #22]
 80039bc:	075b      	lsls	r3, r3, #29
 80039be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80039c2:	69b9      	ldr	r1, [r7, #24]
 80039c4:	0148      	lsls	r0, r1, #5
 80039c6:	69f9      	ldr	r1, [r7, #28]
 80039c8:	4401      	add	r1, r0
 80039ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039ce:	4313      	orrs	r3, r2
 80039d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	0148      	lsls	r0, r1, #5
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	4401      	add	r1, r0
 80039f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d14b      	bne.n	8003a96 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	791b      	ldrb	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d128      	bne.n	8003a74 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d110      	bne.n	8003a54 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	0151      	lsls	r1, r2, #5
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	440a      	add	r2, r1
 8003a48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00f      	b.n	8003a74 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	0151      	lsls	r1, r2, #5
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	440a      	add	r2, r1
 8003a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e166      	b.n	8003d64 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	0151      	lsls	r1, r2, #5
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	440a      	add	r2, r1
 8003aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ab0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ab4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	791b      	ldrb	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d015      	beq.n	8003aea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 814e 	beq.w	8003d64 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	69f9      	ldr	r1, [r7, #28]
 8003ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	634b      	str	r3, [r1, #52]	@ 0x34
 8003ae8:	e13c      	b.n	8003d64 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d110      	bne.n	8003b1c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00f      	b.n	8003b3c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	68d9      	ldr	r1, [r3, #12]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	b298      	uxth	r0, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	4603      	mov	r3, r0
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f9b9 	bl	8003ec8 <USB_WritePacket>
 8003b56:	e105      	b.n	8003d64 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b72:	0cdb      	lsrs	r3, r3, #19
 8003b74:	04db      	lsls	r3, r3, #19
 8003b76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	0151      	lsls	r1, r2, #5
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	440a      	add	r2, r1
 8003b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003b96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003b9a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d132      	bne.n	8003c08 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	0148      	lsls	r0, r1, #5
 8003bd4:	69f9      	ldr	r1, [r7, #28]
 8003bd6:	4401      	add	r1, r0
 8003bd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bfe:	6113      	str	r3, [r2, #16]
 8003c00:	e062      	b.n	8003cc8 <USB_EPStartXfer+0x490>
 8003c02:	bf00      	nop
 8003c04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d123      	bne.n	8003c58 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	0148      	lsls	r0, r1, #5
 8003c2a:	69f9      	ldr	r1, [r7, #28]
 8003c2c:	4401      	add	r1, r0
 8003c2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c54:	6113      	str	r3, [r2, #16]
 8003c56:	e037      	b.n	8003cc8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	1e5a      	subs	r2, r3, #1
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	8afa      	ldrh	r2, [r7, #22]
 8003c74:	fb03 f202 	mul.w	r2, r3, r2
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	8afb      	ldrh	r3, [r7, #22]
 8003c8c:	04d9      	lsls	r1, r3, #19
 8003c8e:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <USB_EPStartXfer+0x538>)
 8003c90:	400b      	ands	r3, r1
 8003c92:	69b9      	ldr	r1, [r7, #24]
 8003c94:	0148      	lsls	r0, r1, #5
 8003c96:	69f9      	ldr	r1, [r7, #28]
 8003c98:	4401      	add	r1, r0
 8003c9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	0148      	lsls	r0, r1, #5
 8003cbc:	69f9      	ldr	r1, [r7, #28]
 8003cbe:	4401      	add	r1, r0
 8003cc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	791b      	ldrb	r3, [r3, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d128      	bne.n	8003d44 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d110      	bne.n	8003d24 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e00f      	b.n	8003d44 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	1ff80000 	.word	0x1ff80000

08003d74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d14a      	bne.n	8003e28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003daa:	f040 8086 	bne.w	8003eba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003df0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003df4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d902      	bls.n	8003e0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
          break;
 8003e0a:	e056      	b.n	8003eba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e24:	d0e7      	beq.n	8003df6 <USB_EPStopXfer+0x82>
 8003e26:	e048      	b.n	8003eba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e40:	d13b      	bne.n	8003eba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d902      	bls.n	8003ea0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e9e:	e00c      	b.n	8003eba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eb8:	d0e7      	beq.n	8003e8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d123      	bne.n	8003f36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003eee:	88bb      	ldrh	r3, [r7, #4]
 8003ef0:	3303      	adds	r3, #3
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e018      	b.n	8003f2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	031a      	lsls	r2, r3, #12
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f08:	461a      	mov	r2, r3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3e2      	bcc.n	8003efc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3724      	adds	r7, #36	@ 0x24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b08b      	sub	sp, #44	@ 0x2c
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
 8003f6e:	e014      	b.n	8003f9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	3301      	adds	r3, #1
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	3301      	adds	r3, #1
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	3301      	adds	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	3301      	adds	r3, #1
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3e6      	bcc.n	8003f70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fa2:	8bfb      	ldrh	r3, [r7, #30]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01e      	beq.n	8003fe6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	701a      	strb	r2, [r3, #0]
      i++;
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003fda:	8bfb      	ldrh	r3, [r7, #30]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fe0:	8bfb      	ldrh	r3, [r7, #30]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1ea      	bne.n	8003fbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	372c      	adds	r7, #44	@ 0x2c
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d12c      	bne.n	800406a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db12      	blt.n	8004048 <USB_EPSetStall+0x54>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004042:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004046:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e02b      	b.n	80040c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db12      	blt.n	80040a2 <USB_EPSetStall+0xae>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00f      	beq.n	80040a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800409c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d128      	bne.n	800413e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800410a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	791b      	ldrb	r3, [r3, #4]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d003      	beq.n	800411c <USB_EPClearStall+0x4c>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	791b      	ldrb	r3, [r3, #4]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d138      	bne.n	800418e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e027      	b.n	800418e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004158:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800415c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	791b      	ldrb	r3, [r3, #4]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d003      	beq.n	800416e <USB_EPClearStall+0x9e>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	791b      	ldrb	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d10f      	bne.n	800418e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	440a      	add	r2, r1
 8004184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004216:	f023 0302 	bic.w	r3, r3, #2
 800421a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004244:	f023 0303 	bic.w	r3, r3, #3
 8004248:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004284:	68fb      	ldr	r3, [r7, #12]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0c1b      	lsrs	r3, r3, #16
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	b29b      	uxth	r3, r3
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004328:	68bb      	ldr	r3, [r7, #8]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	b2db      	uxtb	r3, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4013      	ands	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004384:	68bb      	ldr	r3, [r7, #8]
}
 8004386:	4618      	mov	r0, r3
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0301 	and.w	r3, r3, #1
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	460b      	mov	r3, r1
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	333c      	adds	r3, #60	@ 0x3c
 800440a:	3304      	adds	r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4a26      	ldr	r2, [pc, #152]	@ (80044ac <USB_EP0_OutStart+0xb8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d90a      	bls.n	800442e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004424:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004428:	d101      	bne.n	800442e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e037      	b.n	800449e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800444c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800445c:	f043 0318 	orr.w	r3, r3, #24
 8004460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004470:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004474:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004476:	7afb      	ldrb	r3, [r7, #11]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d10f      	bne.n	800449c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004496:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800449a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	4f54300a 	.word	0x4f54300a

080044b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3301      	adds	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044c8:	d901      	bls.n	80044ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e022      	b.n	8004514 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	daf2      	bge.n	80044bc <USB_CoreReset+0xc>

  count = 10U;
 80044d6:	230a      	movs	r3, #10
 80044d8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80044da:	e002      	b.n	80044e2 <USB_CoreReset+0x32>
  {
    count--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f9      	bne.n	80044dc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004500:	d901      	bls.n	8004506 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e006      	b.n	8004514 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d0f0      	beq.n	80044f4 <USB_CoreReset+0x44>

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800452c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004530:	f002 fcbc 	bl	8006eac <USBD_static_malloc>
 8004534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	32b0      	adds	r2, #176	@ 0xb0
 8004546:	2100      	movs	r1, #0
 8004548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800454c:	2302      	movs	r3, #2
 800454e:	e0d4      	b.n	80046fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004550:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004554:	2100      	movs	r1, #0
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f002 fef6 	bl	8007348 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	32b0      	adds	r2, #176	@ 0xb0
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	32b0      	adds	r2, #176	@ 0xb0
 8004576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7c1b      	ldrb	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d138      	bne.n	80045fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004588:	4b5e      	ldr	r3, [pc, #376]	@ (8004704 <USBD_CDC_Init+0x1e4>)
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004590:	2202      	movs	r2, #2
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f002 fb67 	bl	8006c66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004598:	4b5a      	ldr	r3, [pc, #360]	@ (8004704 <USBD_CDC_Init+0x1e4>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3323      	adds	r3, #35	@ 0x23
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045b2:	4b55      	ldr	r3, [pc, #340]	@ (8004708 <USBD_CDC_Init+0x1e8>)
 80045b4:	7819      	ldrb	r1, [r3, #0]
 80045b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045ba:	2202      	movs	r2, #2
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f002 fb52 	bl	8006c66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045c2:	4b51      	ldr	r3, [pc, #324]	@ (8004708 <USBD_CDC_Init+0x1e8>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045de:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <USBD_CDC_Init+0x1ec>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	331c      	adds	r3, #28
 80045f4:	2210      	movs	r2, #16
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e035      	b.n	8004666 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045fa:	4b42      	ldr	r3, [pc, #264]	@ (8004704 <USBD_CDC_Init+0x1e4>)
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	2340      	movs	r3, #64	@ 0x40
 8004600:	2202      	movs	r2, #2
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f002 fb2f 	bl	8006c66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004608:	4b3e      	ldr	r3, [pc, #248]	@ (8004704 <USBD_CDC_Init+0x1e4>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3323      	adds	r3, #35	@ 0x23
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004622:	4b39      	ldr	r3, [pc, #228]	@ (8004708 <USBD_CDC_Init+0x1e8>)
 8004624:	7819      	ldrb	r1, [r3, #0]
 8004626:	2340      	movs	r3, #64	@ 0x40
 8004628:	2202      	movs	r2, #2
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f002 fb1b 	bl	8006c66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004630:	4b35      	ldr	r3, [pc, #212]	@ (8004708 <USBD_CDC_Init+0x1e8>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f003 020f 	and.w	r2, r3, #15
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800464c:	4b2f      	ldr	r3, [pc, #188]	@ (800470c <USBD_CDC_Init+0x1ec>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	331c      	adds	r3, #28
 8004662:	2210      	movs	r2, #16
 8004664:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004666:	4b29      	ldr	r3, [pc, #164]	@ (800470c <USBD_CDC_Init+0x1ec>)
 8004668:	7819      	ldrb	r1, [r3, #0]
 800466a:	2308      	movs	r3, #8
 800466c:	2203      	movs	r2, #3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f002 faf9 	bl	8006c66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004674:	4b25      	ldr	r3, [pc, #148]	@ (800470c <USBD_CDC_Init+0x1ec>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	3323      	adds	r3, #35	@ 0x23
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	33b0      	adds	r3, #176	@ 0xb0
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80046c4:	2302      	movs	r3, #2
 80046c6:	e018      	b.n	80046fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7c1b      	ldrb	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <USBD_CDC_Init+0x1e8>)
 80046d2:	7819      	ldrb	r1, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f002 fbb0 	bl	8006e44 <USBD_LL_PrepareReceive>
 80046e4:	e008      	b.n	80046f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046e6:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <USBD_CDC_Init+0x1e8>)
 80046e8:	7819      	ldrb	r1, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046f0:	2340      	movs	r3, #64	@ 0x40
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f002 fba6 	bl	8006e44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000093 	.word	0x20000093
 8004708:	20000094 	.word	0x20000094
 800470c:	20000095 	.word	0x20000095

08004710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800471c:	4b3a      	ldr	r3, [pc, #232]	@ (8004808 <USBD_CDC_DeInit+0xf8>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f002 fac5 	bl	8006cb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004728:	4b37      	ldr	r3, [pc, #220]	@ (8004808 <USBD_CDC_DeInit+0xf8>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3323      	adds	r3, #35	@ 0x23
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004742:	4b32      	ldr	r3, [pc, #200]	@ (800480c <USBD_CDC_DeInit+0xfc>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f002 fab2 	bl	8006cb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800474e:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <USBD_CDC_DeInit+0xfc>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f003 020f 	and.w	r2, r3, #15
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800476a:	4b29      	ldr	r3, [pc, #164]	@ (8004810 <USBD_CDC_DeInit+0x100>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f002 fa9e 	bl	8006cb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004776:	4b26      	ldr	r3, [pc, #152]	@ (8004810 <USBD_CDC_DeInit+0x100>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3323      	adds	r3, #35	@ 0x23
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004790:	4b1f      	ldr	r3, [pc, #124]	@ (8004810 <USBD_CDC_DeInit+0x100>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 020f 	and.w	r2, r3, #15
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	331c      	adds	r3, #28
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	32b0      	adds	r2, #176	@ 0xb0
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	33b0      	adds	r3, #176	@ 0xb0
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	32b0      	adds	r2, #176	@ 0xb0
 80047da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047de:	4618      	mov	r0, r3
 80047e0:	f002 fb72 	bl	8006ec8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	32b0      	adds	r2, #176	@ 0xb0
 80047ee:	2100      	movs	r1, #0
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000093 	.word	0x20000093
 800480c:	20000094 	.word	0x20000094
 8004810:	20000095 	.word	0x20000095

08004814 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	32b0      	adds	r2, #176	@ 0xb0
 8004828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004840:	2303      	movs	r3, #3
 8004842:	e0bf      	b.n	80049c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800484c:	2b00      	cmp	r3, #0
 800484e:	d050      	beq.n	80048f2 <USBD_CDC_Setup+0xde>
 8004850:	2b20      	cmp	r3, #32
 8004852:	f040 80af 	bne.w	80049b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	88db      	ldrh	r3, [r3, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d03a      	beq.n	80048d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b25b      	sxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	da1b      	bge.n	80048a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	33b0      	adds	r3, #176	@ 0xb0
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800487e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	88d2      	ldrh	r2, [r2, #6]
 8004884:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	88db      	ldrh	r3, [r3, #6]
 800488a:	2b07      	cmp	r3, #7
 800488c:	bf28      	it	cs
 800488e:	2307      	movcs	r3, #7
 8004890:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	89fa      	ldrh	r2, [r7, #14]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fda9 	bl	80063f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800489e:	e090      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	785a      	ldrb	r2, [r3, #1]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	88db      	ldrh	r3, [r3, #6]
 80048ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80048b0:	d803      	bhi.n	80048ba <USBD_CDC_Setup+0xa6>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	88db      	ldrh	r3, [r3, #6]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	e000      	b.n	80048bc <USBD_CDC_Setup+0xa8>
 80048ba:	2240      	movs	r2, #64	@ 0x40
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80048ca:	461a      	mov	r2, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fdbe 	bl	800644e <USBD_CtlPrepareRx>
      break;
 80048d2:	e076      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	33b0      	adds	r3, #176	@ 0xb0
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	7850      	ldrb	r0, [r2, #1]
 80048ea:	2200      	movs	r2, #0
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	4798      	blx	r3
      break;
 80048f0:	e067      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	2b0b      	cmp	r3, #11
 80048f8:	d851      	bhi.n	800499e <USBD_CDC_Setup+0x18a>
 80048fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <USBD_CDC_Setup+0xec>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004931 	.word	0x08004931
 8004904:	080049ad 	.word	0x080049ad
 8004908:	0800499f 	.word	0x0800499f
 800490c:	0800499f 	.word	0x0800499f
 8004910:	0800499f 	.word	0x0800499f
 8004914:	0800499f 	.word	0x0800499f
 8004918:	0800499f 	.word	0x0800499f
 800491c:	0800499f 	.word	0x0800499f
 8004920:	0800499f 	.word	0x0800499f
 8004924:	0800499f 	.word	0x0800499f
 8004928:	0800495b 	.word	0x0800495b
 800492c:	08004985 	.word	0x08004985
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b03      	cmp	r3, #3
 800493a:	d107      	bne.n	800494c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800493c:	f107 030a 	add.w	r3, r7, #10
 8004940:	2202      	movs	r2, #2
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 fd53 	bl	80063f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800494a:	e032      	b.n	80049b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 fcd1 	bl	80062f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004954:	2303      	movs	r3, #3
 8004956:	75fb      	strb	r3, [r7, #23]
          break;
 8004958:	e02b      	b.n	80049b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004966:	f107 030d 	add.w	r3, r7, #13
 800496a:	2201      	movs	r2, #1
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 fd3e 	bl	80063f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004974:	e01d      	b.n	80049b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fcbc 	bl	80062f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800497e:	2303      	movs	r3, #3
 8004980:	75fb      	strb	r3, [r7, #23]
          break;
 8004982:	e016      	b.n	80049b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b03      	cmp	r3, #3
 800498e:	d00f      	beq.n	80049b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 fcaf 	bl	80062f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004998:	2303      	movs	r3, #3
 800499a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800499c:	e008      	b.n	80049b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 fca8 	bl	80062f6 <USBD_CtlError>
          ret = USBD_FAIL;
 80049a6:	2303      	movs	r3, #3
 80049a8:	75fb      	strb	r3, [r7, #23]
          break;
 80049aa:	e002      	b.n	80049b2 <USBD_CDC_Setup+0x19e>
          break;
 80049ac:	bf00      	nop
 80049ae:	e008      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>
          break;
 80049b0:	bf00      	nop
      }
      break;
 80049b2:	e006      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fc9d 	bl	80062f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80049bc:	2303      	movs	r3, #3
 80049be:	75fb      	strb	r3, [r7, #23]
      break;
 80049c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80049de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	32b0      	adds	r2, #176	@ 0xb0
 80049ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e065      	b.n	8004ac2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	32b0      	adds	r2, #176	@ 0xb0
 8004a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3314      	adds	r3, #20
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02f      	beq.n	8004a80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	3314      	adds	r3, #20
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 010f 	and.w	r1, r3, #15
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4403      	add	r3, r0
 8004a48:	331c      	adds	r3, #28
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d112      	bne.n	8004a80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a72:	78f9      	ldrb	r1, [r7, #3]
 8004a74:	2300      	movs	r3, #0
 8004a76:	2200      	movs	r2, #0
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f002 f9c2 	bl	8006e02 <USBD_LL_Transmit>
 8004a7e:	e01f      	b.n	8004ac0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	33b0      	adds	r3, #176	@ 0xb0
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	33b0      	adds	r3, #176	@ 0xb0
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	32b0      	adds	r2, #176	@ 0xb0
 8004ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	32b0      	adds	r2, #176	@ 0xb0
 8004af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e01a      	b.n	8004b32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f002 f9c0 	bl	8006e86 <USBD_LL_GetRxDataSize>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	33b0      	adds	r3, #176	@ 0xb0
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	32b0      	adds	r2, #176	@ 0xb0
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e024      	b.n	8004ba6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	33b0      	adds	r3, #176	@ 0xb0
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d019      	beq.n	8004ba4 <USBD_CDC_EP0_RxReady+0x6a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004b76:	2bff      	cmp	r3, #255	@ 0xff
 8004b78:	d014      	beq.n	8004ba4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	33b0      	adds	r3, #176	@ 0xb0
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004b92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	22ff      	movs	r2, #255	@ 0xff
 8004ba0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bb8:	2182      	movs	r1, #130	@ 0x82
 8004bba:	4818      	ldr	r0, [pc, #96]	@ (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bbc:	f000 fd62 	bl	8005684 <USBD_GetEpDesc>
 8004bc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4815      	ldr	r0, [pc, #84]	@ (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bc6:	f000 fd5d 	bl	8005684 <USBD_GetEpDesc>
 8004bca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004bcc:	2181      	movs	r1, #129	@ 0x81
 8004bce:	4813      	ldr	r0, [pc, #76]	@ (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bd0:	f000 fd58 	bl	8005684 <USBD_GetEpDesc>
 8004bd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2210      	movs	r2, #16
 8004be0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d006      	beq.n	8004bf6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf0:	711a      	strb	r2, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c04:	711a      	strb	r2, [r3, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2243      	movs	r2, #67	@ 0x43
 8004c0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c10:	4b02      	ldr	r3, [pc, #8]	@ (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000050 	.word	0x20000050

08004c20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c28:	2182      	movs	r1, #130	@ 0x82
 8004c2a:	4818      	ldr	r0, [pc, #96]	@ (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c2c:	f000 fd2a 	bl	8005684 <USBD_GetEpDesc>
 8004c30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c32:	2101      	movs	r1, #1
 8004c34:	4815      	ldr	r0, [pc, #84]	@ (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c36:	f000 fd25 	bl	8005684 <USBD_GetEpDesc>
 8004c3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c3c:	2181      	movs	r1, #129	@ 0x81
 8004c3e:	4813      	ldr	r0, [pc, #76]	@ (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c40:	f000 fd20 	bl	8005684 <USBD_GetEpDesc>
 8004c44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	711a      	strb	r2, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f042 0202 	orr.w	r2, r2, #2
 8004c64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	711a      	strb	r2, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f042 0202 	orr.w	r2, r2, #2
 8004c78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2243      	movs	r2, #67	@ 0x43
 8004c7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c80:	4b02      	ldr	r3, [pc, #8]	@ (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000050 	.word	0x20000050

08004c90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c98:	2182      	movs	r1, #130	@ 0x82
 8004c9a:	4818      	ldr	r0, [pc, #96]	@ (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c9c:	f000 fcf2 	bl	8005684 <USBD_GetEpDesc>
 8004ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4815      	ldr	r0, [pc, #84]	@ (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ca6:	f000 fced 	bl	8005684 <USBD_GetEpDesc>
 8004caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cac:	2181      	movs	r1, #129	@ 0x81
 8004cae:	4813      	ldr	r0, [pc, #76]	@ (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cb0:	f000 fce8 	bl	8005684 <USBD_GetEpDesc>
 8004cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cd0:	711a      	strb	r2, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce4:	711a      	strb	r2, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2243      	movs	r2, #67	@ 0x43
 8004cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cf0:	4b02      	ldr	r3, [pc, #8]	@ (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000050 	.word	0x20000050

08004d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d0e:	4b03      	ldr	r3, [pc, #12]	@ (8004d1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	2000000c 	.word	0x2000000c

08004d20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e009      	b.n	8004d48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	33b0      	adds	r3, #176	@ 0xb0
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	32b0      	adds	r2, #176	@ 0xb0
 8004d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e008      	b.n	8004d8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	32b0      	adds	r2, #176	@ 0xb0
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e004      	b.n	8004dc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	32b0      	adds	r2, #176	@ 0xb0
 8004de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e025      	b.n	8004e46 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11f      	bne.n	8004e44 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e0c:	4b10      	ldr	r3, [pc, #64]	@ (8004e50 <USBD_CDC_TransmitPacket+0x7c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4403      	add	r3, r0
 8004e26:	3314      	adds	r3, #20
 8004e28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <USBD_CDC_TransmitPacket+0x7c>)
 8004e2c:	7819      	ldrb	r1, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 ffe1 	bl	8006e02 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000093 	.word	0x20000093

08004e54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	32b0      	adds	r2, #176	@ 0xb0
 8004e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	32b0      	adds	r2, #176	@ 0xb0
 8004e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e018      	b.n	8004eb4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7c1b      	ldrb	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <USBD_CDC_ReceivePacket+0x68>)
 8004e8c:	7819      	ldrb	r1, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f001 ffd3 	bl	8006e44 <USBD_LL_PrepareReceive>
 8004e9e:	e008      	b.n	8004eb2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ea0:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <USBD_CDC_ReceivePacket+0x68>)
 8004ea2:	7819      	ldrb	r1, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004eaa:	2340      	movs	r3, #64	@ 0x40
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 ffc9 	bl	8006e44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000094 	.word	0x20000094

08004ec0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e01f      	b.n	8004f18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	79fa      	ldrb	r2, [r7, #7]
 8004f0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f001 fe43 	bl	8006b98 <USBD_LL_Init>
 8004f12:	4603      	mov	r3, r0
 8004f14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e025      	b.n	8004f84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	32ae      	adds	r2, #174	@ 0xae
 8004f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00f      	beq.n	8004f74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	32ae      	adds	r2, #174	@ 0xae
 8004f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	f107 020e 	add.w	r2, r7, #14
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4798      	blx	r3
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 fe4b 	bl	8006c30 <USBD_LL_Start>
 8004f9a:	4603      	mov	r3, r0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	4611      	mov	r1, r2
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	4611      	mov	r1, r2
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005018:	2303      	movs	r3, #3
 800501a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f001 f922 	bl	8006282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800504c:	461a      	mov	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	2b02      	cmp	r3, #2
 8005060:	d01a      	beq.n	8005098 <USBD_LL_SetupStage+0x72>
 8005062:	2b02      	cmp	r3, #2
 8005064:	d822      	bhi.n	80050ac <USBD_LL_SetupStage+0x86>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <USBD_LL_SetupStage+0x4a>
 800506a:	2b01      	cmp	r3, #1
 800506c:	d00a      	beq.n	8005084 <USBD_LL_SetupStage+0x5e>
 800506e:	e01d      	b.n	80050ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fb77 	bl	800576c <USBD_StdDevReq>
 800507e:	4603      	mov	r3, r0
 8005080:	73fb      	strb	r3, [r7, #15]
      break;
 8005082:	e020      	b.n	80050c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fbdf 	bl	8005850 <USBD_StdItfReq>
 8005092:	4603      	mov	r3, r0
 8005094:	73fb      	strb	r3, [r7, #15]
      break;
 8005096:	e016      	b.n	80050c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fc41 	bl	8005928 <USBD_StdEPReq>
 80050a6:	4603      	mov	r3, r0
 80050a8:	73fb      	strb	r3, [r7, #15]
      break;
 80050aa:	e00c      	b.n	80050c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80050b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 fe18 	bl	8006cf0 <USBD_LL_StallEP>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
      break;
 80050c4:	bf00      	nop
  }

  return ret;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	460b      	mov	r3, r1
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d177      	bne.n	80051d8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80050ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	f040 80a1 	bne.w	800523e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	8992      	ldrh	r2, [r2, #12]
 8005104:	4293      	cmp	r3, r2
 8005106:	d91c      	bls.n	8005142 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	8992      	ldrh	r2, [r2, #12]
 8005110:	1a9a      	subs	r2, r3, r2
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	8992      	ldrh	r2, [r2, #12]
 800511e:	441a      	add	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6919      	ldr	r1, [r3, #16]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	899b      	ldrh	r3, [r3, #12]
 800512c:	461a      	mov	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4293      	cmp	r3, r2
 8005134:	bf38      	it	cc
 8005136:	4613      	movcc	r3, r2
 8005138:	461a      	mov	r2, r3
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f001 f9a8 	bl	8006490 <USBD_CtlContinueRx>
 8005140:	e07d      	b.n	800523e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2b02      	cmp	r3, #2
 800514e:	d014      	beq.n	800517a <USBD_LL_DataOutStage+0xaa>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d81d      	bhi.n	8005190 <USBD_LL_DataOutStage+0xc0>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <USBD_LL_DataOutStage+0x8e>
 8005158:	2b01      	cmp	r3, #1
 800515a:	d003      	beq.n	8005164 <USBD_LL_DataOutStage+0x94>
 800515c:	e018      	b.n	8005190 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	75bb      	strb	r3, [r7, #22]
            break;
 8005162:	e018      	b.n	8005196 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800516a:	b2db      	uxtb	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fa6e 	bl	8005650 <USBD_CoreFindIF>
 8005174:	4603      	mov	r3, r0
 8005176:	75bb      	strb	r3, [r7, #22]
            break;
 8005178:	e00d      	b.n	8005196 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005180:	b2db      	uxtb	r3, r3
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fa70 	bl	800566a <USBD_CoreFindEP>
 800518a:	4603      	mov	r3, r0
 800518c:	75bb      	strb	r3, [r7, #22]
            break;
 800518e:	e002      	b.n	8005196 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	75bb      	strb	r3, [r7, #22]
            break;
 8005194:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005196:	7dbb      	ldrb	r3, [r7, #22]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d119      	bne.n	80051d0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d113      	bne.n	80051d0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051a8:	7dba      	ldrb	r2, [r7, #22]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	32ae      	adds	r2, #174	@ 0xae
 80051ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80051b8:	7dba      	ldrb	r2, [r7, #22]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051c0:	7dba      	ldrb	r2, [r7, #22]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	32ae      	adds	r2, #174	@ 0xae
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f001 f96e 	bl	80064b2 <USBD_CtlSendStatus>
 80051d6:	e032      	b.n	800523e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	4619      	mov	r1, r3
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fa41 	bl	800566a <USBD_CoreFindEP>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051ec:	7dbb      	ldrb	r3, [r7, #22]
 80051ee:	2bff      	cmp	r3, #255	@ 0xff
 80051f0:	d025      	beq.n	800523e <USBD_LL_DataOutStage+0x16e>
 80051f2:	7dbb      	ldrb	r3, [r7, #22]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d122      	bne.n	800523e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b03      	cmp	r3, #3
 8005202:	d117      	bne.n	8005234 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005204:	7dba      	ldrb	r2, [r7, #22]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	32ae      	adds	r2, #174	@ 0xae
 800520a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005214:	7dba      	ldrb	r2, [r7, #22]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800521c:	7dba      	ldrb	r2, [r7, #22]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	32ae      	adds	r2, #174	@ 0xae
 8005222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	7afa      	ldrb	r2, [r7, #11]
 800522a:	4611      	mov	r1, r2
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	4798      	blx	r3
 8005230:	4603      	mov	r3, r0
 8005232:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	e000      	b.n	8005240 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	460b      	mov	r3, r1
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005256:	7afb      	ldrb	r3, [r7, #11]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d178      	bne.n	800534e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3314      	adds	r3, #20
 8005260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005268:	2b02      	cmp	r3, #2
 800526a:	d163      	bne.n	8005334 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	8992      	ldrh	r2, [r2, #12]
 8005274:	4293      	cmp	r3, r2
 8005276:	d91c      	bls.n	80052b2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	8992      	ldrh	r2, [r2, #12]
 8005280:	1a9a      	subs	r2, r3, r2
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	8992      	ldrh	r2, [r2, #12]
 800528e:	441a      	add	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6919      	ldr	r1, [r3, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	461a      	mov	r2, r3
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f001 f8c4 	bl	800642c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052a4:	2300      	movs	r3, #0
 80052a6:	2200      	movs	r2, #0
 80052a8:	2100      	movs	r1, #0
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 fdca 	bl	8006e44 <USBD_LL_PrepareReceive>
 80052b0:	e040      	b.n	8005334 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	899b      	ldrh	r3, [r3, #12]
 80052b6:	461a      	mov	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d11c      	bne.n	80052fa <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d316      	bcc.n	80052fa <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d20f      	bcs.n	80052fa <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052da:	2200      	movs	r2, #0
 80052dc:	2100      	movs	r1, #0
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f001 f8a4 	bl	800642c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	2100      	movs	r1, #0
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f001 fda6 	bl	8006e44 <USBD_LL_PrepareReceive>
 80052f8:	e01c      	b.n	8005334 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b03      	cmp	r3, #3
 8005304:	d10f      	bne.n	8005326 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005326:	2180      	movs	r1, #128	@ 0x80
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f001 fce1 	bl	8006cf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f001 f8d2 	bl	80064d8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03a      	beq.n	80053b4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fe30 	bl	8004fa4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800534c:	e032      	b.n	80053b4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f986 	bl	800566a <USBD_CoreFindEP>
 800535e:	4603      	mov	r3, r0
 8005360:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2bff      	cmp	r3, #255	@ 0xff
 8005366:	d025      	beq.n	80053b4 <USBD_LL_DataInStage+0x16c>
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d122      	bne.n	80053b4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b03      	cmp	r3, #3
 8005378:	d11c      	bne.n	80053b4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800537a:	7dfa      	ldrb	r2, [r7, #23]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	32ae      	adds	r2, #174	@ 0xae
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d014      	beq.n	80053b4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800538a:	7dfa      	ldrb	r2, [r7, #23]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005392:	7dfa      	ldrb	r2, [r7, #23]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	32ae      	adds	r2, #174	@ 0xae
 8005398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	7afa      	ldrb	r2, [r7, #11]
 80053a0:	4611      	mov	r1, r2
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	4798      	blx	r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053aa:	7dbb      	ldrb	r3, [r7, #22]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80053b0:	7dbb      	ldrb	r3, [r7, #22]
 80053b2:	e000      	b.n	80053b6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d014      	beq.n	8005424 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6852      	ldr	r2, [r2, #4]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	4611      	mov	r1, r2
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005424:	2340      	movs	r3, #64	@ 0x40
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 fc1b 	bl	8006c66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2240      	movs	r2, #64	@ 0x40
 800543c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005440:	2340      	movs	r3, #64	@ 0x40
 8005442:	2200      	movs	r2, #0
 8005444:	2180      	movs	r1, #128	@ 0x80
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fc0d 	bl	8006c66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2240      	movs	r2, #64	@ 0x40
 8005458:	841a      	strh	r2, [r3, #32]

  return ret;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b04      	cmp	r3, #4
 8005496:	d006      	beq.n	80054a6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2204      	movs	r2, #4
 80054aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d106      	bne.n	80054de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d110      	bne.n	8005522 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	32ae      	adds	r2, #174	@ 0xae
 8005542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800554a:	2303      	movs	r3, #3
 800554c:	e01c      	b.n	8005588 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d115      	bne.n	8005586 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	32ae      	adds	r2, #174	@ 0xae
 8005564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	32ae      	adds	r2, #174	@ 0xae
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	4611      	mov	r1, r2
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	32ae      	adds	r2, #174	@ 0xae
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e01c      	b.n	80055ec <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d115      	bne.n	80055ea <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	32ae      	adds	r2, #174	@ 0xae
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	32ae      	adds	r2, #174	@ 0xae
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	4611      	mov	r1, r2
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	4611      	mov	r1, r2
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800565c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	885b      	ldrh	r3, [r3, #2]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d91f      	bls.n	80056ea <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80056b0:	e013      	b.n	80056da <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056b2:	f107 030a 	add.w	r3, r7, #10
 80056b6:	4619      	mov	r1, r3
 80056b8:	6978      	ldr	r0, [r7, #20]
 80056ba:	f000 f81b 	bl	80056f4 <USBD_GetNextDesc>
 80056be:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d108      	bne.n	80056da <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	789b      	ldrb	r3, [r3, #2]
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d008      	beq.n	80056e8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	b29a      	uxth	r2, r3
 80056e0:	897b      	ldrh	r3, [r7, #10]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d8e5      	bhi.n	80056b2 <USBD_GetEpDesc+0x2e>
 80056e6:	e000      	b.n	80056ea <USBD_GetEpDesc+0x66>
          break;
 80056e8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80056ea:	693b      	ldr	r3, [r7, #16]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	4413      	add	r3, r2
 800570c:	b29a      	uxth	r2, r3
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4413      	add	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800571e:	68fb      	ldr	r3, [r7, #12]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	3301      	adds	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800574a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	b21a      	sxth	r2, r3
 8005752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005756:	4313      	orrs	r3, r2
 8005758:	b21b      	sxth	r3, r3
 800575a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800575c:	89fb      	ldrh	r3, [r7, #14]
}
 800575e:	4618      	mov	r0, r3
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005782:	2b40      	cmp	r3, #64	@ 0x40
 8005784:	d005      	beq.n	8005792 <USBD_StdDevReq+0x26>
 8005786:	2b40      	cmp	r3, #64	@ 0x40
 8005788:	d857      	bhi.n	800583a <USBD_StdDevReq+0xce>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00f      	beq.n	80057ae <USBD_StdDevReq+0x42>
 800578e:	2b20      	cmp	r3, #32
 8005790:	d153      	bne.n	800583a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	32ae      	adds	r2, #174	@ 0xae
 800579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e04a      	b.n	8005844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d83b      	bhi.n	800582e <USBD_StdDevReq+0xc2>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <USBD_StdDevReq+0x50>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	08005811 	.word	0x08005811
 80057c0:	08005825 	.word	0x08005825
 80057c4:	0800582f 	.word	0x0800582f
 80057c8:	0800581b 	.word	0x0800581b
 80057cc:	0800582f 	.word	0x0800582f
 80057d0:	080057ef 	.word	0x080057ef
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	0800582f 	.word	0x0800582f
 80057dc:	08005807 	.word	0x08005807
 80057e0:	080057f9 	.word	0x080057f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fa3e 	bl	8005c68 <USBD_GetDescriptor>
          break;
 80057ec:	e024      	b.n	8005838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fba3 	bl	8005f3c <USBD_SetAddress>
          break;
 80057f6:	e01f      	b.n	8005838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fbe2 	bl	8005fc4 <USBD_SetConfig>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]
          break;
 8005804:	e018      	b.n	8005838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fc85 	bl	8006118 <USBD_GetConfig>
          break;
 800580e:	e013      	b.n	8005838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fcb6 	bl	8006184 <USBD_GetStatus>
          break;
 8005818:	e00e      	b.n	8005838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fce5 	bl	80061ec <USBD_SetFeature>
          break;
 8005822:	e009      	b.n	8005838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fd09 	bl	800623e <USBD_ClrFeature>
          break;
 800582c:	e004      	b.n	8005838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fd60 	bl	80062f6 <USBD_CtlError>
          break;
 8005836:	bf00      	nop
      }
      break;
 8005838:	e004      	b.n	8005844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fd5a 	bl	80062f6 <USBD_CtlError>
      break;
 8005842:	bf00      	nop
  }

  return ret;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop

08005850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d005      	beq.n	8005876 <USBD_StdItfReq+0x26>
 800586a:	2b40      	cmp	r3, #64	@ 0x40
 800586c:	d852      	bhi.n	8005914 <USBD_StdItfReq+0xc4>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <USBD_StdItfReq+0x26>
 8005872:	2b20      	cmp	r3, #32
 8005874:	d14e      	bne.n	8005914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800587c:	b2db      	uxtb	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	2b02      	cmp	r3, #2
 8005882:	d840      	bhi.n	8005906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	889b      	ldrh	r3, [r3, #4]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d836      	bhi.n	80058fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	889b      	ldrh	r3, [r3, #4]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff feda 	bl	8005650 <USBD_CoreFindIF>
 800589c:	4603      	mov	r3, r0
 800589e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2bff      	cmp	r3, #255	@ 0xff
 80058a4:	d01d      	beq.n	80058e2 <USBD_StdItfReq+0x92>
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d11a      	bne.n	80058e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80058ac:	7bba      	ldrb	r2, [r7, #14]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	32ae      	adds	r2, #174	@ 0xae
 80058b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00f      	beq.n	80058dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058bc:	7bba      	ldrb	r2, [r7, #14]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058c4:	7bba      	ldrb	r2, [r7, #14]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	32ae      	adds	r2, #174	@ 0xae
 80058ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058da:	e004      	b.n	80058e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058e0:	e001      	b.n	80058e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058e2:	2303      	movs	r3, #3
 80058e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	88db      	ldrh	r3, [r3, #6]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d110      	bne.n	8005910 <USBD_StdItfReq+0xc0>
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fddc 	bl	80064b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058fa:	e009      	b.n	8005910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fcf9 	bl	80062f6 <USBD_CtlError>
          break;
 8005904:	e004      	b.n	8005910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fcf4 	bl	80062f6 <USBD_CtlError>
          break;
 800590e:	e000      	b.n	8005912 <USBD_StdItfReq+0xc2>
          break;
 8005910:	bf00      	nop
      }
      break;
 8005912:	e004      	b.n	800591e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fced 	bl	80062f6 <USBD_CtlError>
      break;
 800591c:	bf00      	nop
  }

  return ret;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	889b      	ldrh	r3, [r3, #4]
 800593a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d007      	beq.n	8005958 <USBD_StdEPReq+0x30>
 8005948:	2b40      	cmp	r3, #64	@ 0x40
 800594a:	f200 8181 	bhi.w	8005c50 <USBD_StdEPReq+0x328>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d02a      	beq.n	80059a8 <USBD_StdEPReq+0x80>
 8005952:	2b20      	cmp	r3, #32
 8005954:	f040 817c 	bne.w	8005c50 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fe84 	bl	800566a <USBD_CoreFindEP>
 8005962:	4603      	mov	r3, r0
 8005964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005966:	7b7b      	ldrb	r3, [r7, #13]
 8005968:	2bff      	cmp	r3, #255	@ 0xff
 800596a:	f000 8176 	beq.w	8005c5a <USBD_StdEPReq+0x332>
 800596e:	7b7b      	ldrb	r3, [r7, #13]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 8172 	bne.w	8005c5a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005976:	7b7a      	ldrb	r2, [r7, #13]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800597e:	7b7a      	ldrb	r2, [r7, #13]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	32ae      	adds	r2, #174	@ 0xae
 8005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8165 	beq.w	8005c5a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005990:	7b7a      	ldrb	r2, [r7, #13]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	32ae      	adds	r2, #174	@ 0xae
 8005996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059a6:	e158      	b.n	8005c5a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d008      	beq.n	80059c2 <USBD_StdEPReq+0x9a>
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	f300 8147 	bgt.w	8005c44 <USBD_StdEPReq+0x31c>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 809b 	beq.w	8005af2 <USBD_StdEPReq+0x1ca>
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d03c      	beq.n	8005a3a <USBD_StdEPReq+0x112>
 80059c0:	e140      	b.n	8005c44 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d002      	beq.n	80059d4 <USBD_StdEPReq+0xac>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d016      	beq.n	8005a00 <USBD_StdEPReq+0xd8>
 80059d2:	e02c      	b.n	8005a2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <USBD_StdEPReq+0xce>
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	2b80      	cmp	r3, #128	@ 0x80
 80059de:	d00a      	beq.n	80059f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 f983 	bl	8006cf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ea:	2180      	movs	r1, #128	@ 0x80
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f97f 	bl	8006cf0 <USBD_LL_StallEP>
 80059f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059f4:	e020      	b.n	8005a38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fc7c 	bl	80062f6 <USBD_CtlError>
              break;
 80059fe:	e01b      	b.n	8005a38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	885b      	ldrh	r3, [r3, #2]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10e      	bne.n	8005a26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <USBD_StdEPReq+0xfe>
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	2b80      	cmp	r3, #128	@ 0x80
 8005a12:	d008      	beq.n	8005a26 <USBD_StdEPReq+0xfe>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	88db      	ldrh	r3, [r3, #6]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f965 	bl	8006cf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fd43 	bl	80064b2 <USBD_CtlSendStatus>

              break;
 8005a2c:	e004      	b.n	8005a38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fc60 	bl	80062f6 <USBD_CtlError>
              break;
 8005a36:	bf00      	nop
          }
          break;
 8005a38:	e109      	b.n	8005c4e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d002      	beq.n	8005a4c <USBD_StdEPReq+0x124>
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d016      	beq.n	8005a78 <USBD_StdEPReq+0x150>
 8005a4a:	e04b      	b.n	8005ae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00d      	beq.n	8005a6e <USBD_StdEPReq+0x146>
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	2b80      	cmp	r3, #128	@ 0x80
 8005a56:	d00a      	beq.n	8005a6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 f947 	bl	8006cf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a62:	2180      	movs	r1, #128	@ 0x80
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 f943 	bl	8006cf0 <USBD_LL_StallEP>
 8005a6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a6c:	e040      	b.n	8005af0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fc40 	bl	80062f6 <USBD_CtlError>
              break;
 8005a76:	e03b      	b.n	8005af0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	885b      	ldrh	r3, [r3, #2]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d136      	bne.n	8005aee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a8a:	7bbb      	ldrb	r3, [r7, #14]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 f94d 	bl	8006d2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fd0c 	bl	80064b2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fde3 	bl	800566a <USBD_CoreFindEP>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aa8:	7b7b      	ldrb	r3, [r7, #13]
 8005aaa:	2bff      	cmp	r3, #255	@ 0xff
 8005aac:	d01f      	beq.n	8005aee <USBD_StdEPReq+0x1c6>
 8005aae:	7b7b      	ldrb	r3, [r7, #13]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11c      	bne.n	8005aee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ab4:	7b7a      	ldrb	r2, [r7, #13]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005abc:	7b7a      	ldrb	r2, [r7, #13]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	@ 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005acc:	7b7a      	ldrb	r2, [r7, #13]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	32ae      	adds	r2, #174	@ 0xae
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005ae2:	e004      	b.n	8005aee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc05 	bl	80062f6 <USBD_CtlError>
              break;
 8005aec:	e000      	b.n	8005af0 <USBD_StdEPReq+0x1c8>
              break;
 8005aee:	bf00      	nop
          }
          break;
 8005af0:	e0ad      	b.n	8005c4e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d002      	beq.n	8005b04 <USBD_StdEPReq+0x1dc>
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d033      	beq.n	8005b6a <USBD_StdEPReq+0x242>
 8005b02:	e099      	b.n	8005c38 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <USBD_StdEPReq+0x1f2>
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b80      	cmp	r3, #128	@ 0x80
 8005b0e:	d004      	beq.n	8005b1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fbef 	bl	80062f6 <USBD_CtlError>
                break;
 8005b18:	e093      	b.n	8005c42 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da0b      	bge.n	8005b3a <USBD_StdEPReq+0x212>
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	3310      	adds	r3, #16
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	3304      	adds	r3, #4
 8005b38:	e00b      	b.n	8005b52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	330e      	adds	r3, #14
 8005b5e:	2202      	movs	r2, #2
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fc44 	bl	80063f0 <USBD_CtlSendData>
              break;
 8005b68:	e06b      	b.n	8005c42 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da11      	bge.n	8005b96 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3323      	adds	r3, #35	@ 0x23
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d117      	bne.n	8005bbc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fbb1 	bl	80062f6 <USBD_CtlError>
                  break;
 8005b94:	e055      	b.n	8005c42 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb9e 	bl	80062f6 <USBD_CtlError>
                  break;
 8005bba:	e042      	b.n	8005c42 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da0b      	bge.n	8005bdc <USBD_StdEPReq+0x2b4>
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3304      	adds	r3, #4
 8005bda:	e00b      	b.n	8005bf4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <USBD_StdEPReq+0x2da>
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	2b80      	cmp	r3, #128	@ 0x80
 8005c00:	d103      	bne.n	8005c0a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	739a      	strb	r2, [r3, #14]
 8005c08:	e00e      	b.n	8005c28 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f8ac 	bl	8006d6c <USBD_LL_IsStallEP>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	739a      	strb	r2, [r3, #14]
 8005c20:	e002      	b.n	8005c28 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	330e      	adds	r3, #14
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fbdd 	bl	80063f0 <USBD_CtlSendData>
              break;
 8005c36:	e004      	b.n	8005c42 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb5b 	bl	80062f6 <USBD_CtlError>
              break;
 8005c40:	bf00      	nop
          }
          break;
 8005c42:	e004      	b.n	8005c4e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fb55 	bl	80062f6 <USBD_CtlError>
          break;
 8005c4c:	bf00      	nop
      }
      break;
 8005c4e:	e005      	b.n	8005c5c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb4f 	bl	80062f6 <USBD_CtlError>
      break;
 8005c58:	e000      	b.n	8005c5c <USBD_StdEPReq+0x334>
      break;
 8005c5a:	bf00      	nop
  }

  return ret;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	885b      	ldrh	r3, [r3, #2]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	2b06      	cmp	r3, #6
 8005c8a:	f200 8128 	bhi.w	8005ede <USBD_GetDescriptor+0x276>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <USBD_GetDescriptor+0x2c>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cb1 	.word	0x08005cb1
 8005c98:	08005cc9 	.word	0x08005cc9
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005edf 	.word	0x08005edf
 8005ca4:	08005edf 	.word	0x08005edf
 8005ca8:	08005e7f 	.word	0x08005e7f
 8005cac:	08005eab 	.word	0x08005eab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7c12      	ldrb	r2, [r2, #16]
 8005cbc:	f107 0108 	add.w	r1, r7, #8
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
      break;
 8005cc6:	e112      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	7c1b      	ldrb	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	f107 0208 	add.w	r2, r7, #8
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cea:	e100      	b.n	8005eee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	f107 0208 	add.w	r2, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	2202      	movs	r2, #2
 8005d04:	701a      	strb	r2, [r3, #0]
      break;
 8005d06:	e0f2      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	885b      	ldrh	r3, [r3, #2]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	f200 80ac 	bhi.w	8005e6c <USBD_GetDescriptor+0x204>
 8005d14:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <USBD_GetDescriptor+0xb4>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d35 	.word	0x08005d35
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d9d 	.word	0x08005d9d
 8005d28:	08005dd1 	.word	0x08005dd1
 8005d2c:	08005e05 	.word	0x08005e05
 8005d30:	08005e39 	.word	0x08005e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d56:	e091      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 facb 	bl	80062f6 <USBD_CtlError>
            err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
          break;
 8005d66:	e089      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8a:	e077      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fab1 	bl	80062f6 <USBD_CtlError>
            err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9a:	e06f      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dbe:	e05d      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa97 	bl	80062f6 <USBD_CtlError>
            err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dce:	e055      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005df2:	e043      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa7d 	bl	80062f6 <USBD_CtlError>
            err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
          break;
 8005e02:	e03b      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e26:	e029      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa63 	bl	80062f6 <USBD_CtlError>
            err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
          break;
 8005e36:	e021      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	7c12      	ldrb	r2, [r2, #16]
 8005e50:	f107 0108 	add.w	r1, r7, #8
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e5a:	e00f      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa49 	bl	80062f6 <USBD_CtlError>
            err++;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	3301      	adds	r3, #1
 8005e68:	72fb      	strb	r3, [r7, #11]
          break;
 8005e6a:	e007      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa41 	bl	80062f6 <USBD_CtlError>
          err++;
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	3301      	adds	r3, #1
 8005e78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e7a:	bf00      	nop
      }
      break;
 8005e7c:	e037      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7c1b      	ldrb	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8e:	f107 0208 	add.w	r2, r7, #8
 8005e92:	4610      	mov	r0, r2
 8005e94:	4798      	blx	r3
 8005e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e98:	e029      	b.n	8005eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa2a 	bl	80062f6 <USBD_CtlError>
        err++;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ea8:	e021      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7c1b      	ldrb	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4798      	blx	r3
 8005ec2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	2207      	movs	r2, #7
 8005eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ecc:	e00f      	b.n	8005eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa10 	bl	80062f6 <USBD_CtlError>
        err++;
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	72fb      	strb	r3, [r7, #11]
      break;
 8005edc:	e007      	b.n	8005eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa08 	bl	80062f6 <USBD_CtlError>
      err++;
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	72fb      	strb	r3, [r7, #11]
      break;
 8005eec:	bf00      	nop
  }

  if (err != 0U)
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11e      	bne.n	8005f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	88db      	ldrh	r3, [r3, #6]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d016      	beq.n	8005f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88da      	ldrh	r2, [r3, #6]
 8005f06:	893b      	ldrh	r3, [r7, #8]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bf28      	it	cs
 8005f0c:	4613      	movcs	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f12:	893b      	ldrh	r3, [r7, #8]
 8005f14:	461a      	mov	r2, r3
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa69 	bl	80063f0 <USBD_CtlSendData>
 8005f1e:	e009      	b.n	8005f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9e7 	bl	80062f6 <USBD_CtlError>
 8005f28:	e004      	b.n	8005f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fac1 	bl	80064b2 <USBD_CtlSendStatus>
 8005f30:	e000      	b.n	8005f34 <USBD_GetDescriptor+0x2cc>
    return;
 8005f32:	bf00      	nop
  }
}
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	889b      	ldrh	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d131      	bne.n	8005fb2 <USBD_SetAddress+0x76>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	88db      	ldrh	r3, [r3, #6]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12d      	bne.n	8005fb2 <USBD_SetAddress+0x76>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	885b      	ldrh	r3, [r3, #2]
 8005f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f5c:	d829      	bhi.n	8005fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	885b      	ldrh	r3, [r3, #2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d104      	bne.n	8005f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f9bc 	bl	80062f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7e:	e01d      	b.n	8005fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7bfa      	ldrb	r2, [r7, #15]
 8005f84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 ff19 	bl	8006dc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa8d 	bl	80064b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	e009      	b.n	8005fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb0:	e004      	b.n	8005fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f99e 	bl	80062f6 <USBD_CtlError>
  }
}
 8005fba:	bf00      	nop
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	885b      	ldrh	r3, [r3, #2]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8006114 <USBD_SetConfig+0x150>)
 8005fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006114 <USBD_SetConfig+0x150>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d905      	bls.n	8005ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f985 	bl	80062f6 <USBD_CtlError>
    return USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e08c      	b.n	800610a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d002      	beq.n	8006002 <USBD_SetConfig+0x3e>
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d029      	beq.n	8006054 <USBD_SetConfig+0x90>
 8006000:	e075      	b.n	80060ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006002:	4b44      	ldr	r3, [pc, #272]	@ (8006114 <USBD_SetConfig+0x150>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d020      	beq.n	800604c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800600a:	4b42      	ldr	r3, [pc, #264]	@ (8006114 <USBD_SetConfig+0x150>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006014:	4b3f      	ldr	r3, [pc, #252]	@ (8006114 <USBD_SetConfig+0x150>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fe ffcd 	bl	8004fba <USBD_SetClassConfig>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f962 	bl	80062f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800603a:	e065      	b.n	8006108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fa38 	bl	80064b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2203      	movs	r2, #3
 8006046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800604a:	e05d      	b.n	8006108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa30 	bl	80064b2 <USBD_CtlSendStatus>
      break;
 8006052:	e059      	b.n	8006108 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006054:	4b2f      	ldr	r3, [pc, #188]	@ (8006114 <USBD_SetConfig+0x150>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d112      	bne.n	8006082 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006064:	4b2b      	ldr	r3, [pc, #172]	@ (8006114 <USBD_SetConfig+0x150>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800606e:	4b29      	ldr	r3, [pc, #164]	@ (8006114 <USBD_SetConfig+0x150>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fe ffbc 	bl	8004ff2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa19 	bl	80064b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006080:	e042      	b.n	8006108 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006082:	4b24      	ldr	r3, [pc, #144]	@ (8006114 <USBD_SetConfig+0x150>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d02a      	beq.n	80060e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fe ffaa 	bl	8004ff2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800609e:	4b1d      	ldr	r3, [pc, #116]	@ (8006114 <USBD_SetConfig+0x150>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006114 <USBD_SetConfig+0x150>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fe ff83 	bl	8004fba <USBD_SetClassConfig>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00f      	beq.n	80060de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f918 	bl	80062f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fe ff8f 	bl	8004ff2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80060dc:	e014      	b.n	8006108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9e7 	bl	80064b2 <USBD_CtlSendStatus>
      break;
 80060e4:	e010      	b.n	8006108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9e3 	bl	80064b2 <USBD_CtlSendStatus>
      break;
 80060ec:	e00c      	b.n	8006108 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f900 	bl	80062f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060f6:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <USBD_SetConfig+0x150>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fe ff78 	bl	8004ff2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006102:	2303      	movs	r3, #3
 8006104:	73fb      	strb	r3, [r7, #15]
      break;
 8006106:	bf00      	nop
  }

  return ret;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2000017c 	.word	0x2000017c

08006118 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	88db      	ldrh	r3, [r3, #6]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d004      	beq.n	8006134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8e2 	bl	80062f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006132:	e023      	b.n	800617c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	dc02      	bgt.n	8006146 <USBD_GetConfig+0x2e>
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc03      	bgt.n	800614c <USBD_GetConfig+0x34>
 8006144:	e015      	b.n	8006172 <USBD_GetConfig+0x5a>
 8006146:	2b03      	cmp	r3, #3
 8006148:	d00b      	beq.n	8006162 <USBD_GetConfig+0x4a>
 800614a:	e012      	b.n	8006172 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3308      	adds	r3, #8
 8006156:	2201      	movs	r2, #1
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f948 	bl	80063f0 <USBD_CtlSendData>
        break;
 8006160:	e00c      	b.n	800617c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	2201      	movs	r2, #1
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f940 	bl	80063f0 <USBD_CtlSendData>
        break;
 8006170:	e004      	b.n	800617c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8be 	bl	80062f6 <USBD_CtlError>
        break;
 800617a:	bf00      	nop
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006194:	b2db      	uxtb	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	2b02      	cmp	r3, #2
 800619a:	d81e      	bhi.n	80061da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	88db      	ldrh	r3, [r3, #6]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d004      	beq.n	80061ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f8a5 	bl	80062f6 <USBD_CtlError>
        break;
 80061ac:	e01a      	b.n	80061e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f043 0202 	orr.w	r2, r3, #2
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	330c      	adds	r3, #12
 80061ce:	2202      	movs	r2, #2
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f90c 	bl	80063f0 <USBD_CtlSendData>
      break;
 80061d8:	e004      	b.n	80061e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f88a 	bl	80062f6 <USBD_CtlError>
      break;
 80061e2:	bf00      	nop
  }
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d107      	bne.n	800620e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f953 	bl	80064b2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800620c:	e013      	b.n	8006236 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	885b      	ldrh	r3, [r3, #2]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d10b      	bne.n	800622e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	889b      	ldrh	r3, [r3, #4]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b29b      	uxth	r3, r3
 800621e:	b2da      	uxtb	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f943 	bl	80064b2 <USBD_CtlSendStatus>
}
 800622c:	e003      	b.n	8006236 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f860 	bl	80062f6 <USBD_CtlError>
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800624e:	b2db      	uxtb	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	2b02      	cmp	r3, #2
 8006254:	d80b      	bhi.n	800626e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	885b      	ldrh	r3, [r3, #2]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10c      	bne.n	8006278 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f923 	bl	80064b2 <USBD_CtlSendStatus>
      }
      break;
 800626c:	e004      	b.n	8006278 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f840 	bl	80062f6 <USBD_CtlError>
      break;
 8006276:	e000      	b.n	800627a <USBD_ClrFeature+0x3c>
      break;
 8006278:	bf00      	nop
  }
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	781a      	ldrb	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fa3d 	bl	800572c <SWAPBYTE>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fa30 	bl	800572c <SWAPBYTE>
 80062cc:	4603      	mov	r3, r0
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7ff fa23 	bl	800572c <SWAPBYTE>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	80da      	strh	r2, [r3, #6]
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006300:	2180      	movs	r1, #128	@ 0x80
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fcf4 	bl	8006cf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fcf0 	bl	8006cf0 <USBD_LL_StallEP>
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d042      	beq.n	80063b4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006332:	6938      	ldr	r0, [r7, #16]
 8006334:	f000 f842 	bl	80063bc <USBD_GetLen>
 8006338:	4603      	mov	r3, r0
 800633a:	3301      	adds	r3, #1
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006342:	d808      	bhi.n	8006356 <USBD_GetString+0x3e>
 8006344:	6938      	ldr	r0, [r7, #16]
 8006346:	f000 f839 	bl	80063bc <USBD_GetLen>
 800634a:	4603      	mov	r3, r0
 800634c:	3301      	adds	r3, #1
 800634e:	b29b      	uxth	r3, r3
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	e001      	b.n	800635a <USBD_GetString+0x42>
 8006356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4413      	add	r3, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	7812      	ldrb	r2, [r2, #0]
 8006368:	701a      	strb	r2, [r3, #0]
  idx++;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	3301      	adds	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	2203      	movs	r2, #3
 8006378:	701a      	strb	r2, [r3, #0]
  idx++;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	3301      	adds	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006380:	e013      	b.n	80063aa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	4413      	add	r3, r2
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	7812      	ldrb	r2, [r2, #0]
 800638c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
    idx++;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	3301      	adds	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	4413      	add	r3, r2
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	3301      	adds	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e7      	bne.n	8006382 <USBD_GetString+0x6a>
 80063b2:	e000      	b.n	80063b6 <USBD_GetString+0x9e>
    return;
 80063b4:	bf00      	nop
  }
}
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063cc:	e005      	b.n	80063da <USBD_GetLen+0x1e>
  {
    len++;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	3301      	adds	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f5      	bne.n	80063ce <USBD_GetLen+0x12>
  }

  return len;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2202      	movs	r2, #2
 8006400:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	2100      	movs	r1, #0
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fcf0 	bl	8006e02 <USBD_LL_Transmit>

  return USBD_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	2100      	movs	r1, #0
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fcdf 	bl	8006e02 <USBD_LL_Transmit>

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2203      	movs	r2, #3
 800645e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	2100      	movs	r1, #0
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fcdf 	bl	8006e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	2100      	movs	r1, #0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fcce 	bl	8006e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064c2:	2300      	movs	r3, #0
 80064c4:	2200      	movs	r2, #0
 80064c6:	2100      	movs	r1, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fc9a 	bl	8006e02 <USBD_LL_Transmit>

  return USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2205      	movs	r2, #5
 80064e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064e8:	2300      	movs	r3, #0
 80064ea:	2200      	movs	r2, #0
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fca8 	bl	8006e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006504:	2200      	movs	r2, #0
 8006506:	4912      	ldr	r1, [pc, #72]	@ (8006550 <MX_USB_DEVICE_Init+0x50>)
 8006508:	4812      	ldr	r0, [pc, #72]	@ (8006554 <MX_USB_DEVICE_Init+0x54>)
 800650a:	f7fe fcd9 	bl	8004ec0 <USBD_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006514:	f7fa f9aa 	bl	800086c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006518:	490f      	ldr	r1, [pc, #60]	@ (8006558 <MX_USB_DEVICE_Init+0x58>)
 800651a:	480e      	ldr	r0, [pc, #56]	@ (8006554 <MX_USB_DEVICE_Init+0x54>)
 800651c:	f7fe fd00 	bl	8004f20 <USBD_RegisterClass>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006526:	f7fa f9a1 	bl	800086c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800652a:	490c      	ldr	r1, [pc, #48]	@ (800655c <MX_USB_DEVICE_Init+0x5c>)
 800652c:	4809      	ldr	r0, [pc, #36]	@ (8006554 <MX_USB_DEVICE_Init+0x54>)
 800652e:	f7fe fbf7 	bl	8004d20 <USBD_CDC_RegisterInterface>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006538:	f7fa f998 	bl	800086c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800653c:	4805      	ldr	r0, [pc, #20]	@ (8006554 <MX_USB_DEVICE_Init+0x54>)
 800653e:	f7fe fd25 	bl	8004f8c <USBD_Start>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006548:	f7fa f990 	bl	800086c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200000ac 	.word	0x200000ac
 8006554:	20000180 	.word	0x20000180
 8006558:	20000018 	.word	0x20000018
 800655c:	20000098 	.word	0x20000098

08006560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006564:	2200      	movs	r2, #0
 8006566:	4905      	ldr	r1, [pc, #20]	@ (800657c <CDC_Init_FS+0x1c>)
 8006568:	4805      	ldr	r0, [pc, #20]	@ (8006580 <CDC_Init_FS+0x20>)
 800656a:	f7fe fbf3 	bl	8004d54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800656e:	4905      	ldr	r1, [pc, #20]	@ (8006584 <CDC_Init_FS+0x24>)
 8006570:	4803      	ldr	r0, [pc, #12]	@ (8006580 <CDC_Init_FS+0x20>)
 8006572:	f7fe fc11 	bl	8004d98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000c5c 	.word	0x20000c5c
 8006580:	20000180 	.word	0x20000180
 8006584:	2000045c 	.word	0x2000045c

08006588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800658c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800658e:	4618      	mov	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	2b23      	cmp	r3, #35	@ 0x23
 80065ac:	d84a      	bhi.n	8006644 <CDC_Control_FS+0xac>
 80065ae:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <CDC_Control_FS+0x1c>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	08006645 	.word	0x08006645
 80065b8:	08006645 	.word	0x08006645
 80065bc:	08006645 	.word	0x08006645
 80065c0:	08006645 	.word	0x08006645
 80065c4:	08006645 	.word	0x08006645
 80065c8:	08006645 	.word	0x08006645
 80065cc:	08006645 	.word	0x08006645
 80065d0:	08006645 	.word	0x08006645
 80065d4:	08006645 	.word	0x08006645
 80065d8:	08006645 	.word	0x08006645
 80065dc:	08006645 	.word	0x08006645
 80065e0:	08006645 	.word	0x08006645
 80065e4:	08006645 	.word	0x08006645
 80065e8:	08006645 	.word	0x08006645
 80065ec:	08006645 	.word	0x08006645
 80065f0:	08006645 	.word	0x08006645
 80065f4:	08006645 	.word	0x08006645
 80065f8:	08006645 	.word	0x08006645
 80065fc:	08006645 	.word	0x08006645
 8006600:	08006645 	.word	0x08006645
 8006604:	08006645 	.word	0x08006645
 8006608:	08006645 	.word	0x08006645
 800660c:	08006645 	.word	0x08006645
 8006610:	08006645 	.word	0x08006645
 8006614:	08006645 	.word	0x08006645
 8006618:	08006645 	.word	0x08006645
 800661c:	08006645 	.word	0x08006645
 8006620:	08006645 	.word	0x08006645
 8006624:	08006645 	.word	0x08006645
 8006628:	08006645 	.word	0x08006645
 800662c:	08006645 	.word	0x08006645
 8006630:	08006645 	.word	0x08006645
 8006634:	08006645 	.word	0x08006645
 8006638:	08006645 	.word	0x08006645
 800663c:	08006645 	.word	0x08006645
 8006640:	08006645 	.word	0x08006645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006644:	bf00      	nop
  }

  return (USBD_OK);
 8006646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4805      	ldr	r0, [pc, #20]	@ (8006678 <CDC_Receive_FS+0x24>)
 8006662:	f7fe fb99 	bl	8004d98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006666:	4804      	ldr	r0, [pc, #16]	@ (8006678 <CDC_Receive_FS+0x24>)
 8006668:	f7fe fbf4 	bl	8004e54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800666c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000180 	.word	0x20000180

0800667c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800668c:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <CDC_Transmit_FS+0x48>)
 800668e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006692:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800669e:	2301      	movs	r3, #1
 80066a0:	e00b      	b.n	80066ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80066a2:	887b      	ldrh	r3, [r7, #2]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4806      	ldr	r0, [pc, #24]	@ (80066c4 <CDC_Transmit_FS+0x48>)
 80066aa:	f7fe fb53 	bl	8004d54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80066ae:	4805      	ldr	r0, [pc, #20]	@ (80066c4 <CDC_Transmit_FS+0x48>)
 80066b0:	f7fe fb90 	bl	8004dd4 <USBD_CDC_TransmitPacket>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000180 	.word	0x20000180

080066c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80066da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2212      	movs	r2, #18
 80066fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80066fe:	4b03      	ldr	r3, [pc, #12]	@ (800670c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	200000c8 	.word	0x200000c8

08006710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2204      	movs	r2, #4
 8006720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006722:	4b03      	ldr	r3, [pc, #12]	@ (8006730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	200000dc 	.word	0x200000dc

08006734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	6039      	str	r1, [r7, #0]
 800673e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d105      	bne.n	8006752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	4907      	ldr	r1, [pc, #28]	@ (8006768 <USBD_FS_ProductStrDescriptor+0x34>)
 800674a:	4808      	ldr	r0, [pc, #32]	@ (800676c <USBD_FS_ProductStrDescriptor+0x38>)
 800674c:	f7ff fde4 	bl	8006318 <USBD_GetString>
 8006750:	e004      	b.n	800675c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4904      	ldr	r1, [pc, #16]	@ (8006768 <USBD_FS_ProductStrDescriptor+0x34>)
 8006756:	4805      	ldr	r0, [pc, #20]	@ (800676c <USBD_FS_ProductStrDescriptor+0x38>)
 8006758:	f7ff fdde 	bl	8006318 <USBD_GetString>
  }
  return USBD_StrDesc;
 800675c:	4b02      	ldr	r3, [pc, #8]	@ (8006768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	2000145c 	.word	0x2000145c
 800676c:	08007f1c 	.word	0x08007f1c

08006770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	4904      	ldr	r1, [pc, #16]	@ (8006790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006780:	4804      	ldr	r0, [pc, #16]	@ (8006794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006782:	f7ff fdc9 	bl	8006318 <USBD_GetString>
  return USBD_StrDesc;
 8006786:	4b02      	ldr	r3, [pc, #8]	@ (8006790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	2000145c 	.word	0x2000145c
 8006794:	08007f34 	.word	0x08007f34

08006798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	221a      	movs	r2, #26
 80067a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067aa:	f000 f843 	bl	8006834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80067ae:	4b02      	ldr	r3, [pc, #8]	@ (80067b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200000e0 	.word	0x200000e0

080067bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4907      	ldr	r1, [pc, #28]	@ (80067f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067d2:	4808      	ldr	r0, [pc, #32]	@ (80067f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067d4:	f7ff fda0 	bl	8006318 <USBD_GetString>
 80067d8:	e004      	b.n	80067e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	4904      	ldr	r1, [pc, #16]	@ (80067f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067de:	4805      	ldr	r0, [pc, #20]	@ (80067f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067e0:	f7ff fd9a 	bl	8006318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067e4:	4b02      	ldr	r3, [pc, #8]	@ (80067f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	2000145c 	.word	0x2000145c
 80067f4:	08007f48 	.word	0x08007f48

080067f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d105      	bne.n	8006816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4907      	ldr	r1, [pc, #28]	@ (800682c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800680e:	4808      	ldr	r0, [pc, #32]	@ (8006830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006810:	f7ff fd82 	bl	8006318 <USBD_GetString>
 8006814:	e004      	b.n	8006820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	4904      	ldr	r1, [pc, #16]	@ (800682c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800681a:	4805      	ldr	r0, [pc, #20]	@ (8006830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800681c:	f7ff fd7c 	bl	8006318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006820:	4b02      	ldr	r3, [pc, #8]	@ (800682c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000145c 	.word	0x2000145c
 8006830:	08007f54 	.word	0x08007f54

08006834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800683a:	4b0f      	ldr	r3, [pc, #60]	@ (8006878 <Get_SerialNum+0x44>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006840:	4b0e      	ldr	r3, [pc, #56]	@ (800687c <Get_SerialNum+0x48>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006846:	4b0e      	ldr	r3, [pc, #56]	@ (8006880 <Get_SerialNum+0x4c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800685a:	2208      	movs	r2, #8
 800685c:	4909      	ldr	r1, [pc, #36]	@ (8006884 <Get_SerialNum+0x50>)
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f814 	bl	800688c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006864:	2204      	movs	r2, #4
 8006866:	4908      	ldr	r1, [pc, #32]	@ (8006888 <Get_SerialNum+0x54>)
 8006868:	68b8      	ldr	r0, [r7, #8]
 800686a:	f000 f80f 	bl	800688c <IntToUnicode>
  }
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	1fff7a10 	.word	0x1fff7a10
 800687c:	1fff7a14 	.word	0x1fff7a14
 8006880:	1fff7a18 	.word	0x1fff7a18
 8006884:	200000e2 	.word	0x200000e2
 8006888:	200000f2 	.word	0x200000f2

0800688c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]
 80068a2:	e027      	b.n	80068f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	0f1b      	lsrs	r3, r3, #28
 80068a8:	2b09      	cmp	r3, #9
 80068aa:	d80b      	bhi.n	80068c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	0f1b      	lsrs	r3, r3, #28
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4619      	mov	r1, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	440b      	add	r3, r1
 80068bc:	3230      	adds	r2, #48	@ 0x30
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e00a      	b.n	80068da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	0f1b      	lsrs	r3, r3, #28
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4619      	mov	r1, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	440b      	add	r3, r1
 80068d4:	3237      	adds	r2, #55	@ 0x37
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	3301      	adds	r3, #1
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	4413      	add	r3, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	3301      	adds	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
 80068f4:	7dfa      	ldrb	r2, [r7, #23]
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d3d3      	bcc.n	80068a4 <IntToUnicode+0x18>
  }
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	@ 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800692c:	d13a      	bne.n	80069a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	4b1e      	ldr	r3, [pc, #120]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006936:	4a1d      	ldr	r2, [pc, #116]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	6313      	str	r3, [r2, #48]	@ 0x30
 800693e:	4b1b      	ldr	r3, [pc, #108]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800694a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800694e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006950:	2302      	movs	r3, #2
 8006952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006958:	2303      	movs	r3, #3
 800695a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800695c:	230a      	movs	r3, #10
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	4619      	mov	r1, r3
 8006966:	4812      	ldr	r0, [pc, #72]	@ (80069b0 <HAL_PCD_MspInit+0xa4>)
 8006968:	f7fa fa54 	bl	8000e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800696c:	4b0f      	ldr	r3, [pc, #60]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 800696e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006970:	4a0e      	ldr	r2, [pc, #56]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 8006972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006976:	6353      	str	r3, [r2, #52]	@ 0x34
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 800697e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006980:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 8006982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006986:	6453      	str	r3, [r2, #68]	@ 0x44
 8006988:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <HAL_PCD_MspInit+0xa0>)
 800698a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006994:	2200      	movs	r2, #0
 8006996:	2100      	movs	r1, #0
 8006998:	2043      	movs	r0, #67	@ 0x43
 800699a:	f7fa fa04 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800699e:	2043      	movs	r0, #67	@ 0x43
 80069a0:	f7fa fa1d 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80069a4:	bf00      	nop
 80069a6:	3728      	adds	r7, #40	@ 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40023800 	.word	0x40023800
 80069b0:	40020000 	.word	0x40020000

080069b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f7fe fb2b 	bl	8005026 <USBD_LL_SetupStage>
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	4619      	mov	r1, r3
 8006a02:	f7fe fb65 	bl	80050d0 <USBD_LL_DataOutStage>
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	3320      	adds	r3, #32
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	4619      	mov	r1, r3
 8006a36:	f7fe fc07 	bl	8005248 <USBD_LL_DataInStage>
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe fd4b 	bl	80054ec <USBD_LL_SOF>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	79db      	ldrb	r3, [r3, #7]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	e008      	b.n	8006a8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	79db      	ldrb	r3, [r3, #7]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d102      	bne.n	8006a86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	e001      	b.n	8006a8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006a86:	f7f9 fef1 	bl	800086c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a90:	7bfa      	ldrb	r2, [r7, #15]
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fce5 	bl	8005464 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fe fc8c 	bl	80053be <USBD_LL_Reset>
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fce0 	bl	8005484 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7adb      	ldrb	r3, [r3, #11]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <HAL_PCD_SuspendCallback+0x48>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	4a03      	ldr	r2, [pc, #12]	@ (8006af8 <HAL_PCD_SuspendCallback+0x48>)
 8006aea:	f043 0306 	orr.w	r3, r3, #6
 8006aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fcd6 	bl	80054bc <USBD_LL_Resume>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fd2e 	bl	8005590 <USBD_LL_IsoOUTIncomplete>
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fcea 	bl	800552c <USBD_LL_IsoINIncomplete>
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fd40 	bl	80055f4 <USBD_LL_DevConnected>
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fd3d 	bl	800560a <USBD_LL_DevDisconnected>
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d13c      	bne.n	8006c22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ba8:	4a20      	ldr	r2, [pc, #128]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bc6:	4b19      	ldr	r3, [pc, #100]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bc8:	2202      	movs	r2, #2
 8006bca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006bcc:	4b17      	ldr	r3, [pc, #92]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006bd2:	4b16      	ldr	r3, [pc, #88]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006bd8:	4b14      	ldr	r3, [pc, #80]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006bde:	4b13      	ldr	r3, [pc, #76]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006be4:	4b11      	ldr	r3, [pc, #68]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006bea:	4b10      	ldr	r3, [pc, #64]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bf6:	480d      	ldr	r0, [pc, #52]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006bf8:	f7fa fac1 	bl	800117e <HAL_PCD_Init>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006c02:	f7f9 fe33 	bl	800086c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c06:	2180      	movs	r1, #128	@ 0x80
 8006c08:	4808      	ldr	r0, [pc, #32]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006c0a:	f7fb fcee 	bl	80025ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c0e:	2240      	movs	r2, #64	@ 0x40
 8006c10:	2100      	movs	r1, #0
 8006c12:	4806      	ldr	r0, [pc, #24]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006c14:	f7fb fca2 	bl	800255c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c18:	2280      	movs	r2, #128	@ 0x80
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4803      	ldr	r0, [pc, #12]	@ (8006c2c <USBD_LL_Init+0x94>)
 8006c1e:	f7fb fc9d 	bl	800255c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	2000165c 	.word	0x2000165c

08006c30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fa fba8 	bl	800139c <HAL_PCD_Start>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f942 	bl	8006edc <USBD_Get_USB_Status>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	4608      	mov	r0, r1
 8006c70:	4611      	mov	r1, r2
 8006c72:	461a      	mov	r2, r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	70fb      	strb	r3, [r7, #3]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70bb      	strb	r3, [r7, #2]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006c8e:	78bb      	ldrb	r3, [r7, #2]
 8006c90:	883a      	ldrh	r2, [r7, #0]
 8006c92:	78f9      	ldrb	r1, [r7, #3]
 8006c94:	f7fb f87c 	bl	8001d90 <HAL_PCD_EP_Open>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f91c 	bl	8006edc <USBD_Get_USB_Status>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ccc:	78fa      	ldrb	r2, [r7, #3]
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fb f8c7 	bl	8001e64 <HAL_PCD_EP_Close>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f8fd 	bl	8006edc <USBD_Get_USB_Status>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fb f97f 	bl	8002012 <HAL_PCD_EP_SetStall>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f8de 	bl	8006edc <USBD_Get_USB_Status>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fb f9c3 	bl	80020d8 <HAL_PCD_EP_ClrStall>
 8006d52:	4603      	mov	r3, r0
 8006d54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 f8bf 	bl	8006edc <USBD_Get_USB_Status>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da0b      	bge.n	8006da0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3316      	adds	r3, #22
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	e00b      	b.n	8006db8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006db6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	4611      	mov	r1, r2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fa ffb0 	bl	8001d48 <HAL_PCD_SetAddress>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f874 	bl	8006edc <USBD_Get_USB_Status>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b086      	sub	sp, #24
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006e20:	7af9      	ldrb	r1, [r7, #11]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	f7fb f8ba 	bl	8001f9e <HAL_PCD_EP_Transmit>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f853 	bl	8006edc <USBD_Get_USB_Status>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	607a      	str	r2, [r7, #4]
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	460b      	mov	r3, r1
 8006e52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006e62:	7af9      	ldrb	r1, [r7, #11]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	f7fb f846 	bl	8001ef8 <HAL_PCD_EP_Receive>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f832 	bl	8006edc <USBD_Get_USB_Status>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fb f866 	bl	8001f6e <HAL_PCD_EP_GetRxCount>
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	@ (8006ec4 <USBD_static_malloc+0x18>)
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20001b40 	.word	0x20001b40

08006ec8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d817      	bhi.n	8006f20 <USBD_Get_USB_Status+0x44>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <USBD_Get_USB_Status+0x1c>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f0f 	.word	0x08006f0f
 8006f00:	08006f15 	.word	0x08006f15
 8006f04:	08006f1b 	.word	0x08006f1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f0c:	e00b      	b.n	8006f26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	73fb      	strb	r3, [r7, #15]
    break;
 8006f12:	e008      	b.n	8006f26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
    break;
 8006f18:	e005      	b.n	8006f26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f1e:	e002      	b.n	8006f26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	73fb      	strb	r3, [r7, #15]
    break;
 8006f24:	bf00      	nop
  }
  return usb_status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <std>:
 8006f34:	2300      	movs	r3, #0
 8006f36:	b510      	push	{r4, lr}
 8006f38:	4604      	mov	r4, r0
 8006f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f42:	6083      	str	r3, [r0, #8]
 8006f44:	8181      	strh	r1, [r0, #12]
 8006f46:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f48:	81c2      	strh	r2, [r0, #14]
 8006f4a:	6183      	str	r3, [r0, #24]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	2208      	movs	r2, #8
 8006f50:	305c      	adds	r0, #92	@ 0x5c
 8006f52:	f000 f9f9 	bl	8007348 <memset>
 8006f56:	4b0d      	ldr	r3, [pc, #52]	@ (8006f8c <std+0x58>)
 8006f58:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <std+0x5c>)
 8006f5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f94 <std+0x60>)
 8006f60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f62:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <std+0x64>)
 8006f64:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f66:	4b0d      	ldr	r3, [pc, #52]	@ (8006f9c <std+0x68>)
 8006f68:	6224      	str	r4, [r4, #32]
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	d006      	beq.n	8006f7c <std+0x48>
 8006f6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f72:	4294      	cmp	r4, r2
 8006f74:	d002      	beq.n	8006f7c <std+0x48>
 8006f76:	33d0      	adds	r3, #208	@ 0xd0
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	d105      	bne.n	8006f88 <std+0x54>
 8006f7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f84:	f000 ba58 	b.w	8007438 <__retarget_lock_init_recursive>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08007199 	.word	0x08007199
 8006f90:	080071bb 	.word	0x080071bb
 8006f94:	080071f3 	.word	0x080071f3
 8006f98:	08007217 	.word	0x08007217
 8006f9c:	20001d60 	.word	0x20001d60

08006fa0 <stdio_exit_handler>:
 8006fa0:	4a02      	ldr	r2, [pc, #8]	@ (8006fac <stdio_exit_handler+0xc>)
 8006fa2:	4903      	ldr	r1, [pc, #12]	@ (8006fb0 <stdio_exit_handler+0x10>)
 8006fa4:	4803      	ldr	r0, [pc, #12]	@ (8006fb4 <stdio_exit_handler+0x14>)
 8006fa6:	f000 b869 	b.w	800707c <_fwalk_sglue>
 8006faa:	bf00      	nop
 8006fac:	200000fc 	.word	0x200000fc
 8006fb0:	08007cd5 	.word	0x08007cd5
 8006fb4:	2000010c 	.word	0x2000010c

08006fb8 <cleanup_stdio>:
 8006fb8:	6841      	ldr	r1, [r0, #4]
 8006fba:	4b0c      	ldr	r3, [pc, #48]	@ (8006fec <cleanup_stdio+0x34>)
 8006fbc:	4299      	cmp	r1, r3
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	d001      	beq.n	8006fc8 <cleanup_stdio+0x10>
 8006fc4:	f000 fe86 	bl	8007cd4 <_fflush_r>
 8006fc8:	68a1      	ldr	r1, [r4, #8]
 8006fca:	4b09      	ldr	r3, [pc, #36]	@ (8006ff0 <cleanup_stdio+0x38>)
 8006fcc:	4299      	cmp	r1, r3
 8006fce:	d002      	beq.n	8006fd6 <cleanup_stdio+0x1e>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fe7f 	bl	8007cd4 <_fflush_r>
 8006fd6:	68e1      	ldr	r1, [r4, #12]
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <cleanup_stdio+0x3c>)
 8006fda:	4299      	cmp	r1, r3
 8006fdc:	d004      	beq.n	8006fe8 <cleanup_stdio+0x30>
 8006fde:	4620      	mov	r0, r4
 8006fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe4:	f000 be76 	b.w	8007cd4 <_fflush_r>
 8006fe8:	bd10      	pop	{r4, pc}
 8006fea:	bf00      	nop
 8006fec:	20001d60 	.word	0x20001d60
 8006ff0:	20001dc8 	.word	0x20001dc8
 8006ff4:	20001e30 	.word	0x20001e30

08006ff8 <global_stdio_init.part.0>:
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <global_stdio_init.part.0+0x30>)
 8006ffc:	4c0b      	ldr	r4, [pc, #44]	@ (800702c <global_stdio_init.part.0+0x34>)
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8007030 <global_stdio_init.part.0+0x38>)
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	4620      	mov	r0, r4
 8007004:	2200      	movs	r2, #0
 8007006:	2104      	movs	r1, #4
 8007008:	f7ff ff94 	bl	8006f34 <std>
 800700c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007010:	2201      	movs	r2, #1
 8007012:	2109      	movs	r1, #9
 8007014:	f7ff ff8e 	bl	8006f34 <std>
 8007018:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800701c:	2202      	movs	r2, #2
 800701e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007022:	2112      	movs	r1, #18
 8007024:	f7ff bf86 	b.w	8006f34 <std>
 8007028:	20001e98 	.word	0x20001e98
 800702c:	20001d60 	.word	0x20001d60
 8007030:	08006fa1 	.word	0x08006fa1

08007034 <__sfp_lock_acquire>:
 8007034:	4801      	ldr	r0, [pc, #4]	@ (800703c <__sfp_lock_acquire+0x8>)
 8007036:	f000 ba00 	b.w	800743a <__retarget_lock_acquire_recursive>
 800703a:	bf00      	nop
 800703c:	20001ea1 	.word	0x20001ea1

08007040 <__sfp_lock_release>:
 8007040:	4801      	ldr	r0, [pc, #4]	@ (8007048 <__sfp_lock_release+0x8>)
 8007042:	f000 b9fb 	b.w	800743c <__retarget_lock_release_recursive>
 8007046:	bf00      	nop
 8007048:	20001ea1 	.word	0x20001ea1

0800704c <__sinit>:
 800704c:	b510      	push	{r4, lr}
 800704e:	4604      	mov	r4, r0
 8007050:	f7ff fff0 	bl	8007034 <__sfp_lock_acquire>
 8007054:	6a23      	ldr	r3, [r4, #32]
 8007056:	b11b      	cbz	r3, 8007060 <__sinit+0x14>
 8007058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800705c:	f7ff bff0 	b.w	8007040 <__sfp_lock_release>
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <__sinit+0x28>)
 8007062:	6223      	str	r3, [r4, #32]
 8007064:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <__sinit+0x2c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f5      	bne.n	8007058 <__sinit+0xc>
 800706c:	f7ff ffc4 	bl	8006ff8 <global_stdio_init.part.0>
 8007070:	e7f2      	b.n	8007058 <__sinit+0xc>
 8007072:	bf00      	nop
 8007074:	08006fb9 	.word	0x08006fb9
 8007078:	20001e98 	.word	0x20001e98

0800707c <_fwalk_sglue>:
 800707c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007080:	4607      	mov	r7, r0
 8007082:	4688      	mov	r8, r1
 8007084:	4614      	mov	r4, r2
 8007086:	2600      	movs	r6, #0
 8007088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800708c:	f1b9 0901 	subs.w	r9, r9, #1
 8007090:	d505      	bpl.n	800709e <_fwalk_sglue+0x22>
 8007092:	6824      	ldr	r4, [r4, #0]
 8007094:	2c00      	cmp	r4, #0
 8007096:	d1f7      	bne.n	8007088 <_fwalk_sglue+0xc>
 8007098:	4630      	mov	r0, r6
 800709a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d907      	bls.n	80070b4 <_fwalk_sglue+0x38>
 80070a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070a8:	3301      	adds	r3, #1
 80070aa:	d003      	beq.n	80070b4 <_fwalk_sglue+0x38>
 80070ac:	4629      	mov	r1, r5
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c0      	blx	r8
 80070b2:	4306      	orrs	r6, r0
 80070b4:	3568      	adds	r5, #104	@ 0x68
 80070b6:	e7e9      	b.n	800708c <_fwalk_sglue+0x10>

080070b8 <iprintf>:
 80070b8:	b40f      	push	{r0, r1, r2, r3}
 80070ba:	b507      	push	{r0, r1, r2, lr}
 80070bc:	4906      	ldr	r1, [pc, #24]	@ (80070d8 <iprintf+0x20>)
 80070be:	ab04      	add	r3, sp, #16
 80070c0:	6808      	ldr	r0, [r1, #0]
 80070c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c6:	6881      	ldr	r1, [r0, #8]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	f000 fadb 	bl	8007684 <_vfiprintf_r>
 80070ce:	b003      	add	sp, #12
 80070d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070d4:	b004      	add	sp, #16
 80070d6:	4770      	bx	lr
 80070d8:	20000108 	.word	0x20000108

080070dc <_puts_r>:
 80070dc:	6a03      	ldr	r3, [r0, #32]
 80070de:	b570      	push	{r4, r5, r6, lr}
 80070e0:	6884      	ldr	r4, [r0, #8]
 80070e2:	4605      	mov	r5, r0
 80070e4:	460e      	mov	r6, r1
 80070e6:	b90b      	cbnz	r3, 80070ec <_puts_r+0x10>
 80070e8:	f7ff ffb0 	bl	800704c <__sinit>
 80070ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070ee:	07db      	lsls	r3, r3, #31
 80070f0:	d405      	bmi.n	80070fe <_puts_r+0x22>
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	0598      	lsls	r0, r3, #22
 80070f6:	d402      	bmi.n	80070fe <_puts_r+0x22>
 80070f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070fa:	f000 f99e 	bl	800743a <__retarget_lock_acquire_recursive>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	0719      	lsls	r1, r3, #28
 8007102:	d502      	bpl.n	800710a <_puts_r+0x2e>
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d135      	bne.n	8007176 <_puts_r+0x9a>
 800710a:	4621      	mov	r1, r4
 800710c:	4628      	mov	r0, r5
 800710e:	f000 f8c5 	bl	800729c <__swsetup_r>
 8007112:	b380      	cbz	r0, 8007176 <_puts_r+0x9a>
 8007114:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800711a:	07da      	lsls	r2, r3, #31
 800711c:	d405      	bmi.n	800712a <_puts_r+0x4e>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	059b      	lsls	r3, r3, #22
 8007122:	d402      	bmi.n	800712a <_puts_r+0x4e>
 8007124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007126:	f000 f989 	bl	800743c <__retarget_lock_release_recursive>
 800712a:	4628      	mov	r0, r5
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	2b00      	cmp	r3, #0
 8007130:	da04      	bge.n	800713c <_puts_r+0x60>
 8007132:	69a2      	ldr	r2, [r4, #24]
 8007134:	429a      	cmp	r2, r3
 8007136:	dc17      	bgt.n	8007168 <_puts_r+0x8c>
 8007138:	290a      	cmp	r1, #10
 800713a:	d015      	beq.n	8007168 <_puts_r+0x8c>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	6022      	str	r2, [r4, #0]
 8007142:	7019      	strb	r1, [r3, #0]
 8007144:	68a3      	ldr	r3, [r4, #8]
 8007146:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800714a:	3b01      	subs	r3, #1
 800714c:	60a3      	str	r3, [r4, #8]
 800714e:	2900      	cmp	r1, #0
 8007150:	d1ed      	bne.n	800712e <_puts_r+0x52>
 8007152:	2b00      	cmp	r3, #0
 8007154:	da11      	bge.n	800717a <_puts_r+0x9e>
 8007156:	4622      	mov	r2, r4
 8007158:	210a      	movs	r1, #10
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f85f 	bl	800721e <__swbuf_r>
 8007160:	3001      	adds	r0, #1
 8007162:	d0d7      	beq.n	8007114 <_puts_r+0x38>
 8007164:	250a      	movs	r5, #10
 8007166:	e7d7      	b.n	8007118 <_puts_r+0x3c>
 8007168:	4622      	mov	r2, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 f857 	bl	800721e <__swbuf_r>
 8007170:	3001      	adds	r0, #1
 8007172:	d1e7      	bne.n	8007144 <_puts_r+0x68>
 8007174:	e7ce      	b.n	8007114 <_puts_r+0x38>
 8007176:	3e01      	subs	r6, #1
 8007178:	e7e4      	b.n	8007144 <_puts_r+0x68>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	220a      	movs	r2, #10
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	e7ee      	b.n	8007164 <_puts_r+0x88>
	...

08007188 <puts>:
 8007188:	4b02      	ldr	r3, [pc, #8]	@ (8007194 <puts+0xc>)
 800718a:	4601      	mov	r1, r0
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	f7ff bfa5 	b.w	80070dc <_puts_r>
 8007192:	bf00      	nop
 8007194:	20000108 	.word	0x20000108

08007198 <__sread>:
 8007198:	b510      	push	{r4, lr}
 800719a:	460c      	mov	r4, r1
 800719c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a0:	f000 f8fc 	bl	800739c <_read_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	bfab      	itete	ge
 80071a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071aa:	89a3      	ldrhlt	r3, [r4, #12]
 80071ac:	181b      	addge	r3, r3, r0
 80071ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071b2:	bfac      	ite	ge
 80071b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071b6:	81a3      	strhlt	r3, [r4, #12]
 80071b8:	bd10      	pop	{r4, pc}

080071ba <__swrite>:
 80071ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071be:	461f      	mov	r7, r3
 80071c0:	898b      	ldrh	r3, [r1, #12]
 80071c2:	05db      	lsls	r3, r3, #23
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	4616      	mov	r6, r2
 80071ca:	d505      	bpl.n	80071d8 <__swrite+0x1e>
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	2302      	movs	r3, #2
 80071d2:	2200      	movs	r2, #0
 80071d4:	f000 f8d0 	bl	8007378 <_lseek_r>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	4628      	mov	r0, r5
 80071ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	f000 b8e7 	b.w	80073c0 <_write_r>

080071f2 <__sseek>:
 80071f2:	b510      	push	{r4, lr}
 80071f4:	460c      	mov	r4, r1
 80071f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fa:	f000 f8bd 	bl	8007378 <_lseek_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	bf15      	itete	ne
 8007204:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007206:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800720a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800720e:	81a3      	strheq	r3, [r4, #12]
 8007210:	bf18      	it	ne
 8007212:	81a3      	strhne	r3, [r4, #12]
 8007214:	bd10      	pop	{r4, pc}

08007216 <__sclose>:
 8007216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721a:	f000 b89d 	b.w	8007358 <_close_r>

0800721e <__swbuf_r>:
 800721e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007220:	460e      	mov	r6, r1
 8007222:	4614      	mov	r4, r2
 8007224:	4605      	mov	r5, r0
 8007226:	b118      	cbz	r0, 8007230 <__swbuf_r+0x12>
 8007228:	6a03      	ldr	r3, [r0, #32]
 800722a:	b90b      	cbnz	r3, 8007230 <__swbuf_r+0x12>
 800722c:	f7ff ff0e 	bl	800704c <__sinit>
 8007230:	69a3      	ldr	r3, [r4, #24]
 8007232:	60a3      	str	r3, [r4, #8]
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	071a      	lsls	r2, r3, #28
 8007238:	d501      	bpl.n	800723e <__swbuf_r+0x20>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	b943      	cbnz	r3, 8007250 <__swbuf_r+0x32>
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f82b 	bl	800729c <__swsetup_r>
 8007246:	b118      	cbz	r0, 8007250 <__swbuf_r+0x32>
 8007248:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800724c:	4638      	mov	r0, r7
 800724e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	6922      	ldr	r2, [r4, #16]
 8007254:	1a98      	subs	r0, r3, r2
 8007256:	6963      	ldr	r3, [r4, #20]
 8007258:	b2f6      	uxtb	r6, r6
 800725a:	4283      	cmp	r3, r0
 800725c:	4637      	mov	r7, r6
 800725e:	dc05      	bgt.n	800726c <__swbuf_r+0x4e>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 fd36 	bl	8007cd4 <_fflush_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	d1ed      	bne.n	8007248 <__swbuf_r+0x2a>
 800726c:	68a3      	ldr	r3, [r4, #8]
 800726e:	3b01      	subs	r3, #1
 8007270:	60a3      	str	r3, [r4, #8]
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	701e      	strb	r6, [r3, #0]
 800727a:	6962      	ldr	r2, [r4, #20]
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	429a      	cmp	r2, r3
 8007280:	d004      	beq.n	800728c <__swbuf_r+0x6e>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	07db      	lsls	r3, r3, #31
 8007286:	d5e1      	bpl.n	800724c <__swbuf_r+0x2e>
 8007288:	2e0a      	cmp	r6, #10
 800728a:	d1df      	bne.n	800724c <__swbuf_r+0x2e>
 800728c:	4621      	mov	r1, r4
 800728e:	4628      	mov	r0, r5
 8007290:	f000 fd20 	bl	8007cd4 <_fflush_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	d0d9      	beq.n	800724c <__swbuf_r+0x2e>
 8007298:	e7d6      	b.n	8007248 <__swbuf_r+0x2a>
	...

0800729c <__swsetup_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4b29      	ldr	r3, [pc, #164]	@ (8007344 <__swsetup_r+0xa8>)
 80072a0:	4605      	mov	r5, r0
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	460c      	mov	r4, r1
 80072a6:	b118      	cbz	r0, 80072b0 <__swsetup_r+0x14>
 80072a8:	6a03      	ldr	r3, [r0, #32]
 80072aa:	b90b      	cbnz	r3, 80072b0 <__swsetup_r+0x14>
 80072ac:	f7ff fece 	bl	800704c <__sinit>
 80072b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b4:	0719      	lsls	r1, r3, #28
 80072b6:	d422      	bmi.n	80072fe <__swsetup_r+0x62>
 80072b8:	06da      	lsls	r2, r3, #27
 80072ba:	d407      	bmi.n	80072cc <__swsetup_r+0x30>
 80072bc:	2209      	movs	r2, #9
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072ca:	e033      	b.n	8007334 <__swsetup_r+0x98>
 80072cc:	0758      	lsls	r0, r3, #29
 80072ce:	d512      	bpl.n	80072f6 <__swsetup_r+0x5a>
 80072d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072d2:	b141      	cbz	r1, 80072e6 <__swsetup_r+0x4a>
 80072d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072d8:	4299      	cmp	r1, r3
 80072da:	d002      	beq.n	80072e2 <__swsetup_r+0x46>
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f8af 	bl	8007440 <_free_r>
 80072e2:	2300      	movs	r3, #0
 80072e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072ec:	81a3      	strh	r3, [r4, #12]
 80072ee:	2300      	movs	r3, #0
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	f043 0308 	orr.w	r3, r3, #8
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	b94b      	cbnz	r3, 8007316 <__swsetup_r+0x7a>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800730c:	d003      	beq.n	8007316 <__swsetup_r+0x7a>
 800730e:	4621      	mov	r1, r4
 8007310:	4628      	mov	r0, r5
 8007312:	f000 fd2d 	bl	8007d70 <__smakebuf_r>
 8007316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800731a:	f013 0201 	ands.w	r2, r3, #1
 800731e:	d00a      	beq.n	8007336 <__swsetup_r+0x9a>
 8007320:	2200      	movs	r2, #0
 8007322:	60a2      	str	r2, [r4, #8]
 8007324:	6962      	ldr	r2, [r4, #20]
 8007326:	4252      	negs	r2, r2
 8007328:	61a2      	str	r2, [r4, #24]
 800732a:	6922      	ldr	r2, [r4, #16]
 800732c:	b942      	cbnz	r2, 8007340 <__swsetup_r+0xa4>
 800732e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007332:	d1c5      	bne.n	80072c0 <__swsetup_r+0x24>
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	0799      	lsls	r1, r3, #30
 8007338:	bf58      	it	pl
 800733a:	6962      	ldrpl	r2, [r4, #20]
 800733c:	60a2      	str	r2, [r4, #8]
 800733e:	e7f4      	b.n	800732a <__swsetup_r+0x8e>
 8007340:	2000      	movs	r0, #0
 8007342:	e7f7      	b.n	8007334 <__swsetup_r+0x98>
 8007344:	20000108 	.word	0x20000108

08007348 <memset>:
 8007348:	4402      	add	r2, r0
 800734a:	4603      	mov	r3, r0
 800734c:	4293      	cmp	r3, r2
 800734e:	d100      	bne.n	8007352 <memset+0xa>
 8007350:	4770      	bx	lr
 8007352:	f803 1b01 	strb.w	r1, [r3], #1
 8007356:	e7f9      	b.n	800734c <memset+0x4>

08007358 <_close_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d06      	ldr	r5, [pc, #24]	@ (8007374 <_close_r+0x1c>)
 800735c:	2300      	movs	r3, #0
 800735e:	4604      	mov	r4, r0
 8007360:	4608      	mov	r0, r1
 8007362:	602b      	str	r3, [r5, #0]
 8007364:	f7f9 fb07 	bl	8000976 <_close>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d102      	bne.n	8007372 <_close_r+0x1a>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b103      	cbz	r3, 8007372 <_close_r+0x1a>
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	20001e9c 	.word	0x20001e9c

08007378 <_lseek_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d07      	ldr	r5, [pc, #28]	@ (8007398 <_lseek_r+0x20>)
 800737c:	4604      	mov	r4, r0
 800737e:	4608      	mov	r0, r1
 8007380:	4611      	mov	r1, r2
 8007382:	2200      	movs	r2, #0
 8007384:	602a      	str	r2, [r5, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	f7f9 fb1c 	bl	80009c4 <_lseek>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_lseek_r+0x1e>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_lseek_r+0x1e>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20001e9c 	.word	0x20001e9c

0800739c <_read_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d07      	ldr	r5, [pc, #28]	@ (80073bc <_read_r+0x20>)
 80073a0:	4604      	mov	r4, r0
 80073a2:	4608      	mov	r0, r1
 80073a4:	4611      	mov	r1, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	602a      	str	r2, [r5, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7f9 fac6 	bl	800093c <_read>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_read_r+0x1e>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_read_r+0x1e>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20001e9c 	.word	0x20001e9c

080073c0 <_write_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	@ (80073e0 <_write_r+0x20>)
 80073c4:	4604      	mov	r4, r0
 80073c6:	4608      	mov	r0, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7f9 f8e4 	bl	800059c <_write>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_write_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_write_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20001e9c 	.word	0x20001e9c

080073e4 <__errno>:
 80073e4:	4b01      	ldr	r3, [pc, #4]	@ (80073ec <__errno+0x8>)
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	20000108 	.word	0x20000108

080073f0 <__libc_init_array>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007428 <__libc_init_array+0x38>)
 80073f4:	4c0d      	ldr	r4, [pc, #52]	@ (800742c <__libc_init_array+0x3c>)
 80073f6:	1b64      	subs	r4, r4, r5
 80073f8:	10a4      	asrs	r4, r4, #2
 80073fa:	2600      	movs	r6, #0
 80073fc:	42a6      	cmp	r6, r4
 80073fe:	d109      	bne.n	8007414 <__libc_init_array+0x24>
 8007400:	4d0b      	ldr	r5, [pc, #44]	@ (8007430 <__libc_init_array+0x40>)
 8007402:	4c0c      	ldr	r4, [pc, #48]	@ (8007434 <__libc_init_array+0x44>)
 8007404:	f000 fd22 	bl	8007e4c <_init>
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	2600      	movs	r6, #0
 800740e:	42a6      	cmp	r6, r4
 8007410:	d105      	bne.n	800741e <__libc_init_array+0x2e>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	f855 3b04 	ldr.w	r3, [r5], #4
 8007418:	4798      	blx	r3
 800741a:	3601      	adds	r6, #1
 800741c:	e7ee      	b.n	80073fc <__libc_init_array+0xc>
 800741e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007422:	4798      	blx	r3
 8007424:	3601      	adds	r6, #1
 8007426:	e7f2      	b.n	800740e <__libc_init_array+0x1e>
 8007428:	08007fb0 	.word	0x08007fb0
 800742c:	08007fb0 	.word	0x08007fb0
 8007430:	08007fb0 	.word	0x08007fb0
 8007434:	08007fb4 	.word	0x08007fb4

08007438 <__retarget_lock_init_recursive>:
 8007438:	4770      	bx	lr

0800743a <__retarget_lock_acquire_recursive>:
 800743a:	4770      	bx	lr

0800743c <__retarget_lock_release_recursive>:
 800743c:	4770      	bx	lr
	...

08007440 <_free_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4605      	mov	r5, r0
 8007444:	2900      	cmp	r1, #0
 8007446:	d041      	beq.n	80074cc <_free_r+0x8c>
 8007448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800744c:	1f0c      	subs	r4, r1, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfb8      	it	lt
 8007452:	18e4      	addlt	r4, r4, r3
 8007454:	f000 f8e0 	bl	8007618 <__malloc_lock>
 8007458:	4a1d      	ldr	r2, [pc, #116]	@ (80074d0 <_free_r+0x90>)
 800745a:	6813      	ldr	r3, [r2, #0]
 800745c:	b933      	cbnz	r3, 800746c <_free_r+0x2c>
 800745e:	6063      	str	r3, [r4, #4]
 8007460:	6014      	str	r4, [r2, #0]
 8007462:	4628      	mov	r0, r5
 8007464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007468:	f000 b8dc 	b.w	8007624 <__malloc_unlock>
 800746c:	42a3      	cmp	r3, r4
 800746e:	d908      	bls.n	8007482 <_free_r+0x42>
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	1821      	adds	r1, r4, r0
 8007474:	428b      	cmp	r3, r1
 8007476:	bf01      	itttt	eq
 8007478:	6819      	ldreq	r1, [r3, #0]
 800747a:	685b      	ldreq	r3, [r3, #4]
 800747c:	1809      	addeq	r1, r1, r0
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	e7ed      	b.n	800745e <_free_r+0x1e>
 8007482:	461a      	mov	r2, r3
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	b10b      	cbz	r3, 800748c <_free_r+0x4c>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d9fa      	bls.n	8007482 <_free_r+0x42>
 800748c:	6811      	ldr	r1, [r2, #0]
 800748e:	1850      	adds	r0, r2, r1
 8007490:	42a0      	cmp	r0, r4
 8007492:	d10b      	bne.n	80074ac <_free_r+0x6c>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	4401      	add	r1, r0
 8007498:	1850      	adds	r0, r2, r1
 800749a:	4283      	cmp	r3, r0
 800749c:	6011      	str	r1, [r2, #0]
 800749e:	d1e0      	bne.n	8007462 <_free_r+0x22>
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	6053      	str	r3, [r2, #4]
 80074a6:	4408      	add	r0, r1
 80074a8:	6010      	str	r0, [r2, #0]
 80074aa:	e7da      	b.n	8007462 <_free_r+0x22>
 80074ac:	d902      	bls.n	80074b4 <_free_r+0x74>
 80074ae:	230c      	movs	r3, #12
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	e7d6      	b.n	8007462 <_free_r+0x22>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	1821      	adds	r1, r4, r0
 80074b8:	428b      	cmp	r3, r1
 80074ba:	bf04      	itt	eq
 80074bc:	6819      	ldreq	r1, [r3, #0]
 80074be:	685b      	ldreq	r3, [r3, #4]
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	bf04      	itt	eq
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	6054      	str	r4, [r2, #4]
 80074ca:	e7ca      	b.n	8007462 <_free_r+0x22>
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	bf00      	nop
 80074d0:	20001ea8 	.word	0x20001ea8

080074d4 <sbrk_aligned>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007514 <sbrk_aligned+0x40>)
 80074d8:	460c      	mov	r4, r1
 80074da:	6831      	ldr	r1, [r6, #0]
 80074dc:	4605      	mov	r5, r0
 80074de:	b911      	cbnz	r1, 80074e6 <sbrk_aligned+0x12>
 80074e0:	f000 fca4 	bl	8007e2c <_sbrk_r>
 80074e4:	6030      	str	r0, [r6, #0]
 80074e6:	4621      	mov	r1, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 fc9f 	bl	8007e2c <_sbrk_r>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d103      	bne.n	80074fa <sbrk_aligned+0x26>
 80074f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074f6:	4620      	mov	r0, r4
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
 80074fa:	1cc4      	adds	r4, r0, #3
 80074fc:	f024 0403 	bic.w	r4, r4, #3
 8007500:	42a0      	cmp	r0, r4
 8007502:	d0f8      	beq.n	80074f6 <sbrk_aligned+0x22>
 8007504:	1a21      	subs	r1, r4, r0
 8007506:	4628      	mov	r0, r5
 8007508:	f000 fc90 	bl	8007e2c <_sbrk_r>
 800750c:	3001      	adds	r0, #1
 800750e:	d1f2      	bne.n	80074f6 <sbrk_aligned+0x22>
 8007510:	e7ef      	b.n	80074f2 <sbrk_aligned+0x1e>
 8007512:	bf00      	nop
 8007514:	20001ea4 	.word	0x20001ea4

08007518 <_malloc_r>:
 8007518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800751c:	1ccd      	adds	r5, r1, #3
 800751e:	f025 0503 	bic.w	r5, r5, #3
 8007522:	3508      	adds	r5, #8
 8007524:	2d0c      	cmp	r5, #12
 8007526:	bf38      	it	cc
 8007528:	250c      	movcc	r5, #12
 800752a:	2d00      	cmp	r5, #0
 800752c:	4606      	mov	r6, r0
 800752e:	db01      	blt.n	8007534 <_malloc_r+0x1c>
 8007530:	42a9      	cmp	r1, r5
 8007532:	d904      	bls.n	800753e <_malloc_r+0x26>
 8007534:	230c      	movs	r3, #12
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	2000      	movs	r0, #0
 800753a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007614 <_malloc_r+0xfc>
 8007542:	f000 f869 	bl	8007618 <__malloc_lock>
 8007546:	f8d8 3000 	ldr.w	r3, [r8]
 800754a:	461c      	mov	r4, r3
 800754c:	bb44      	cbnz	r4, 80075a0 <_malloc_r+0x88>
 800754e:	4629      	mov	r1, r5
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff ffbf 	bl	80074d4 <sbrk_aligned>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	4604      	mov	r4, r0
 800755a:	d158      	bne.n	800760e <_malloc_r+0xf6>
 800755c:	f8d8 4000 	ldr.w	r4, [r8]
 8007560:	4627      	mov	r7, r4
 8007562:	2f00      	cmp	r7, #0
 8007564:	d143      	bne.n	80075ee <_malloc_r+0xd6>
 8007566:	2c00      	cmp	r4, #0
 8007568:	d04b      	beq.n	8007602 <_malloc_r+0xea>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	4639      	mov	r1, r7
 800756e:	4630      	mov	r0, r6
 8007570:	eb04 0903 	add.w	r9, r4, r3
 8007574:	f000 fc5a 	bl	8007e2c <_sbrk_r>
 8007578:	4581      	cmp	r9, r0
 800757a:	d142      	bne.n	8007602 <_malloc_r+0xea>
 800757c:	6821      	ldr	r1, [r4, #0]
 800757e:	1a6d      	subs	r5, r5, r1
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff ffa6 	bl	80074d4 <sbrk_aligned>
 8007588:	3001      	adds	r0, #1
 800758a:	d03a      	beq.n	8007602 <_malloc_r+0xea>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	442b      	add	r3, r5
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	f8d8 3000 	ldr.w	r3, [r8]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	bb62      	cbnz	r2, 80075f4 <_malloc_r+0xdc>
 800759a:	f8c8 7000 	str.w	r7, [r8]
 800759e:	e00f      	b.n	80075c0 <_malloc_r+0xa8>
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	1b52      	subs	r2, r2, r5
 80075a4:	d420      	bmi.n	80075e8 <_malloc_r+0xd0>
 80075a6:	2a0b      	cmp	r2, #11
 80075a8:	d917      	bls.n	80075da <_malloc_r+0xc2>
 80075aa:	1961      	adds	r1, r4, r5
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	6025      	str	r5, [r4, #0]
 80075b0:	bf18      	it	ne
 80075b2:	6059      	strne	r1, [r3, #4]
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	bf08      	it	eq
 80075b8:	f8c8 1000 	streq.w	r1, [r8]
 80075bc:	5162      	str	r2, [r4, r5]
 80075be:	604b      	str	r3, [r1, #4]
 80075c0:	4630      	mov	r0, r6
 80075c2:	f000 f82f 	bl	8007624 <__malloc_unlock>
 80075c6:	f104 000b 	add.w	r0, r4, #11
 80075ca:	1d23      	adds	r3, r4, #4
 80075cc:	f020 0007 	bic.w	r0, r0, #7
 80075d0:	1ac2      	subs	r2, r0, r3
 80075d2:	bf1c      	itt	ne
 80075d4:	1a1b      	subne	r3, r3, r0
 80075d6:	50a3      	strne	r3, [r4, r2]
 80075d8:	e7af      	b.n	800753a <_malloc_r+0x22>
 80075da:	6862      	ldr	r2, [r4, #4]
 80075dc:	42a3      	cmp	r3, r4
 80075de:	bf0c      	ite	eq
 80075e0:	f8c8 2000 	streq.w	r2, [r8]
 80075e4:	605a      	strne	r2, [r3, #4]
 80075e6:	e7eb      	b.n	80075c0 <_malloc_r+0xa8>
 80075e8:	4623      	mov	r3, r4
 80075ea:	6864      	ldr	r4, [r4, #4]
 80075ec:	e7ae      	b.n	800754c <_malloc_r+0x34>
 80075ee:	463c      	mov	r4, r7
 80075f0:	687f      	ldr	r7, [r7, #4]
 80075f2:	e7b6      	b.n	8007562 <_malloc_r+0x4a>
 80075f4:	461a      	mov	r2, r3
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d1fb      	bne.n	80075f4 <_malloc_r+0xdc>
 80075fc:	2300      	movs	r3, #0
 80075fe:	6053      	str	r3, [r2, #4]
 8007600:	e7de      	b.n	80075c0 <_malloc_r+0xa8>
 8007602:	230c      	movs	r3, #12
 8007604:	6033      	str	r3, [r6, #0]
 8007606:	4630      	mov	r0, r6
 8007608:	f000 f80c 	bl	8007624 <__malloc_unlock>
 800760c:	e794      	b.n	8007538 <_malloc_r+0x20>
 800760e:	6005      	str	r5, [r0, #0]
 8007610:	e7d6      	b.n	80075c0 <_malloc_r+0xa8>
 8007612:	bf00      	nop
 8007614:	20001ea8 	.word	0x20001ea8

08007618 <__malloc_lock>:
 8007618:	4801      	ldr	r0, [pc, #4]	@ (8007620 <__malloc_lock+0x8>)
 800761a:	f7ff bf0e 	b.w	800743a <__retarget_lock_acquire_recursive>
 800761e:	bf00      	nop
 8007620:	20001ea0 	.word	0x20001ea0

08007624 <__malloc_unlock>:
 8007624:	4801      	ldr	r0, [pc, #4]	@ (800762c <__malloc_unlock+0x8>)
 8007626:	f7ff bf09 	b.w	800743c <__retarget_lock_release_recursive>
 800762a:	bf00      	nop
 800762c:	20001ea0 	.word	0x20001ea0

08007630 <__sfputc_r>:
 8007630:	6893      	ldr	r3, [r2, #8]
 8007632:	3b01      	subs	r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	b410      	push	{r4}
 8007638:	6093      	str	r3, [r2, #8]
 800763a:	da08      	bge.n	800764e <__sfputc_r+0x1e>
 800763c:	6994      	ldr	r4, [r2, #24]
 800763e:	42a3      	cmp	r3, r4
 8007640:	db01      	blt.n	8007646 <__sfputc_r+0x16>
 8007642:	290a      	cmp	r1, #10
 8007644:	d103      	bne.n	800764e <__sfputc_r+0x1e>
 8007646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800764a:	f7ff bde8 	b.w	800721e <__swbuf_r>
 800764e:	6813      	ldr	r3, [r2, #0]
 8007650:	1c58      	adds	r0, r3, #1
 8007652:	6010      	str	r0, [r2, #0]
 8007654:	7019      	strb	r1, [r3, #0]
 8007656:	4608      	mov	r0, r1
 8007658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800765c:	4770      	bx	lr

0800765e <__sfputs_r>:
 800765e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007660:	4606      	mov	r6, r0
 8007662:	460f      	mov	r7, r1
 8007664:	4614      	mov	r4, r2
 8007666:	18d5      	adds	r5, r2, r3
 8007668:	42ac      	cmp	r4, r5
 800766a:	d101      	bne.n	8007670 <__sfputs_r+0x12>
 800766c:	2000      	movs	r0, #0
 800766e:	e007      	b.n	8007680 <__sfputs_r+0x22>
 8007670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007674:	463a      	mov	r2, r7
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff ffda 	bl	8007630 <__sfputc_r>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d1f3      	bne.n	8007668 <__sfputs_r+0xa>
 8007680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007684 <_vfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	460d      	mov	r5, r1
 800768a:	b09d      	sub	sp, #116	@ 0x74
 800768c:	4614      	mov	r4, r2
 800768e:	4698      	mov	r8, r3
 8007690:	4606      	mov	r6, r0
 8007692:	b118      	cbz	r0, 800769c <_vfiprintf_r+0x18>
 8007694:	6a03      	ldr	r3, [r0, #32]
 8007696:	b90b      	cbnz	r3, 800769c <_vfiprintf_r+0x18>
 8007698:	f7ff fcd8 	bl	800704c <__sinit>
 800769c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076aa:	f7ff fec6 	bl	800743a <__retarget_lock_acquire_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	d501      	bpl.n	80076b8 <_vfiprintf_r+0x34>
 80076b4:	692b      	ldr	r3, [r5, #16]
 80076b6:	b99b      	cbnz	r3, 80076e0 <_vfiprintf_r+0x5c>
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff fdee 	bl	800729c <__swsetup_r>
 80076c0:	b170      	cbz	r0, 80076e0 <_vfiprintf_r+0x5c>
 80076c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076c4:	07dc      	lsls	r4, r3, #31
 80076c6:	d504      	bpl.n	80076d2 <_vfiprintf_r+0x4e>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076cc:	b01d      	add	sp, #116	@ 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	0598      	lsls	r0, r3, #22
 80076d6:	d4f7      	bmi.n	80076c8 <_vfiprintf_r+0x44>
 80076d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076da:	f7ff feaf 	bl	800743c <__retarget_lock_release_recursive>
 80076de:	e7f3      	b.n	80076c8 <_vfiprintf_r+0x44>
 80076e0:	2300      	movs	r3, #0
 80076e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e4:	2320      	movs	r3, #32
 80076e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ee:	2330      	movs	r3, #48	@ 0x30
 80076f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078a0 <_vfiprintf_r+0x21c>
 80076f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076f8:	f04f 0901 	mov.w	r9, #1
 80076fc:	4623      	mov	r3, r4
 80076fe:	469a      	mov	sl, r3
 8007700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007704:	b10a      	cbz	r2, 800770a <_vfiprintf_r+0x86>
 8007706:	2a25      	cmp	r2, #37	@ 0x25
 8007708:	d1f9      	bne.n	80076fe <_vfiprintf_r+0x7a>
 800770a:	ebba 0b04 	subs.w	fp, sl, r4
 800770e:	d00b      	beq.n	8007728 <_vfiprintf_r+0xa4>
 8007710:	465b      	mov	r3, fp
 8007712:	4622      	mov	r2, r4
 8007714:	4629      	mov	r1, r5
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ffa1 	bl	800765e <__sfputs_r>
 800771c:	3001      	adds	r0, #1
 800771e:	f000 80a7 	beq.w	8007870 <_vfiprintf_r+0x1ec>
 8007722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007724:	445a      	add	r2, fp
 8007726:	9209      	str	r2, [sp, #36]	@ 0x24
 8007728:	f89a 3000 	ldrb.w	r3, [sl]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 809f 	beq.w	8007870 <_vfiprintf_r+0x1ec>
 8007732:	2300      	movs	r3, #0
 8007734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773c:	f10a 0a01 	add.w	sl, sl, #1
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007748:	931a      	str	r3, [sp, #104]	@ 0x68
 800774a:	4654      	mov	r4, sl
 800774c:	2205      	movs	r2, #5
 800774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007752:	4853      	ldr	r0, [pc, #332]	@ (80078a0 <_vfiprintf_r+0x21c>)
 8007754:	f7f8 fd3c 	bl	80001d0 <memchr>
 8007758:	9a04      	ldr	r2, [sp, #16]
 800775a:	b9d8      	cbnz	r0, 8007794 <_vfiprintf_r+0x110>
 800775c:	06d1      	lsls	r1, r2, #27
 800775e:	bf44      	itt	mi
 8007760:	2320      	movmi	r3, #32
 8007762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007766:	0713      	lsls	r3, r2, #28
 8007768:	bf44      	itt	mi
 800776a:	232b      	movmi	r3, #43	@ 0x2b
 800776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007770:	f89a 3000 	ldrb.w	r3, [sl]
 8007774:	2b2a      	cmp	r3, #42	@ 0x2a
 8007776:	d015      	beq.n	80077a4 <_vfiprintf_r+0x120>
 8007778:	9a07      	ldr	r2, [sp, #28]
 800777a:	4654      	mov	r4, sl
 800777c:	2000      	movs	r0, #0
 800777e:	f04f 0c0a 	mov.w	ip, #10
 8007782:	4621      	mov	r1, r4
 8007784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007788:	3b30      	subs	r3, #48	@ 0x30
 800778a:	2b09      	cmp	r3, #9
 800778c:	d94b      	bls.n	8007826 <_vfiprintf_r+0x1a2>
 800778e:	b1b0      	cbz	r0, 80077be <_vfiprintf_r+0x13a>
 8007790:	9207      	str	r2, [sp, #28]
 8007792:	e014      	b.n	80077be <_vfiprintf_r+0x13a>
 8007794:	eba0 0308 	sub.w	r3, r0, r8
 8007798:	fa09 f303 	lsl.w	r3, r9, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	46a2      	mov	sl, r4
 80077a2:	e7d2      	b.n	800774a <_vfiprintf_r+0xc6>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	1d19      	adds	r1, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbb      	ittet	lt
 80077b0:	425b      	neglt	r3, r3
 80077b2:	f042 0202 	orrlt.w	r2, r2, #2
 80077b6:	9307      	strge	r3, [sp, #28]
 80077b8:	9307      	strlt	r3, [sp, #28]
 80077ba:	bfb8      	it	lt
 80077bc:	9204      	strlt	r2, [sp, #16]
 80077be:	7823      	ldrb	r3, [r4, #0]
 80077c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077c2:	d10a      	bne.n	80077da <_vfiprintf_r+0x156>
 80077c4:	7863      	ldrb	r3, [r4, #1]
 80077c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c8:	d132      	bne.n	8007830 <_vfiprintf_r+0x1ac>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	1d1a      	adds	r2, r3, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	9203      	str	r2, [sp, #12]
 80077d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077d6:	3402      	adds	r4, #2
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078b0 <_vfiprintf_r+0x22c>
 80077de:	7821      	ldrb	r1, [r4, #0]
 80077e0:	2203      	movs	r2, #3
 80077e2:	4650      	mov	r0, sl
 80077e4:	f7f8 fcf4 	bl	80001d0 <memchr>
 80077e8:	b138      	cbz	r0, 80077fa <_vfiprintf_r+0x176>
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	eba0 000a 	sub.w	r0, r0, sl
 80077f0:	2240      	movs	r2, #64	@ 0x40
 80077f2:	4082      	lsls	r2, r0
 80077f4:	4313      	orrs	r3, r2
 80077f6:	3401      	adds	r4, #1
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fe:	4829      	ldr	r0, [pc, #164]	@ (80078a4 <_vfiprintf_r+0x220>)
 8007800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007804:	2206      	movs	r2, #6
 8007806:	f7f8 fce3 	bl	80001d0 <memchr>
 800780a:	2800      	cmp	r0, #0
 800780c:	d03f      	beq.n	800788e <_vfiprintf_r+0x20a>
 800780e:	4b26      	ldr	r3, [pc, #152]	@ (80078a8 <_vfiprintf_r+0x224>)
 8007810:	bb1b      	cbnz	r3, 800785a <_vfiprintf_r+0x1d6>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	3307      	adds	r3, #7
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	3308      	adds	r3, #8
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	443b      	add	r3, r7
 8007822:	9309      	str	r3, [sp, #36]	@ 0x24
 8007824:	e76a      	b.n	80076fc <_vfiprintf_r+0x78>
 8007826:	fb0c 3202 	mla	r2, ip, r2, r3
 800782a:	460c      	mov	r4, r1
 800782c:	2001      	movs	r0, #1
 800782e:	e7a8      	b.n	8007782 <_vfiprintf_r+0xfe>
 8007830:	2300      	movs	r3, #0
 8007832:	3401      	adds	r4, #1
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	4619      	mov	r1, r3
 8007838:	f04f 0c0a 	mov.w	ip, #10
 800783c:	4620      	mov	r0, r4
 800783e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007842:	3a30      	subs	r2, #48	@ 0x30
 8007844:	2a09      	cmp	r2, #9
 8007846:	d903      	bls.n	8007850 <_vfiprintf_r+0x1cc>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0c6      	beq.n	80077da <_vfiprintf_r+0x156>
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	e7c4      	b.n	80077da <_vfiprintf_r+0x156>
 8007850:	fb0c 2101 	mla	r1, ip, r1, r2
 8007854:	4604      	mov	r4, r0
 8007856:	2301      	movs	r3, #1
 8007858:	e7f0      	b.n	800783c <_vfiprintf_r+0x1b8>
 800785a:	ab03      	add	r3, sp, #12
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	462a      	mov	r2, r5
 8007860:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <_vfiprintf_r+0x228>)
 8007862:	a904      	add	r1, sp, #16
 8007864:	4630      	mov	r0, r6
 8007866:	f3af 8000 	nop.w
 800786a:	4607      	mov	r7, r0
 800786c:	1c78      	adds	r0, r7, #1
 800786e:	d1d6      	bne.n	800781e <_vfiprintf_r+0x19a>
 8007870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007872:	07d9      	lsls	r1, r3, #31
 8007874:	d405      	bmi.n	8007882 <_vfiprintf_r+0x1fe>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	059a      	lsls	r2, r3, #22
 800787a:	d402      	bmi.n	8007882 <_vfiprintf_r+0x1fe>
 800787c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800787e:	f7ff fddd 	bl	800743c <__retarget_lock_release_recursive>
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	065b      	lsls	r3, r3, #25
 8007886:	f53f af1f 	bmi.w	80076c8 <_vfiprintf_r+0x44>
 800788a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800788c:	e71e      	b.n	80076cc <_vfiprintf_r+0x48>
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	462a      	mov	r2, r5
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <_vfiprintf_r+0x228>)
 8007896:	a904      	add	r1, sp, #16
 8007898:	4630      	mov	r0, r6
 800789a:	f000 f879 	bl	8007990 <_printf_i>
 800789e:	e7e4      	b.n	800786a <_vfiprintf_r+0x1e6>
 80078a0:	08007f74 	.word	0x08007f74
 80078a4:	08007f7e 	.word	0x08007f7e
 80078a8:	00000000 	.word	0x00000000
 80078ac:	0800765f 	.word	0x0800765f
 80078b0:	08007f7a 	.word	0x08007f7a

080078b4 <_printf_common>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	4616      	mov	r6, r2
 80078ba:	4698      	mov	r8, r3
 80078bc:	688a      	ldr	r2, [r1, #8]
 80078be:	690b      	ldr	r3, [r1, #16]
 80078c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078c4:	4293      	cmp	r3, r2
 80078c6:	bfb8      	it	lt
 80078c8:	4613      	movlt	r3, r2
 80078ca:	6033      	str	r3, [r6, #0]
 80078cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078d0:	4607      	mov	r7, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	b10a      	cbz	r2, 80078da <_printf_common+0x26>
 80078d6:	3301      	adds	r3, #1
 80078d8:	6033      	str	r3, [r6, #0]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	0699      	lsls	r1, r3, #26
 80078de:	bf42      	ittt	mi
 80078e0:	6833      	ldrmi	r3, [r6, #0]
 80078e2:	3302      	addmi	r3, #2
 80078e4:	6033      	strmi	r3, [r6, #0]
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	f015 0506 	ands.w	r5, r5, #6
 80078ec:	d106      	bne.n	80078fc <_printf_common+0x48>
 80078ee:	f104 0a19 	add.w	sl, r4, #25
 80078f2:	68e3      	ldr	r3, [r4, #12]
 80078f4:	6832      	ldr	r2, [r6, #0]
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	dc26      	bgt.n	800794a <_printf_common+0x96>
 80078fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	3b00      	subs	r3, #0
 8007904:	bf18      	it	ne
 8007906:	2301      	movne	r3, #1
 8007908:	0692      	lsls	r2, r2, #26
 800790a:	d42b      	bmi.n	8007964 <_printf_common+0xb0>
 800790c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007910:	4641      	mov	r1, r8
 8007912:	4638      	mov	r0, r7
 8007914:	47c8      	blx	r9
 8007916:	3001      	adds	r0, #1
 8007918:	d01e      	beq.n	8007958 <_printf_common+0xa4>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	6922      	ldr	r2, [r4, #16]
 800791e:	f003 0306 	and.w	r3, r3, #6
 8007922:	2b04      	cmp	r3, #4
 8007924:	bf02      	ittt	eq
 8007926:	68e5      	ldreq	r5, [r4, #12]
 8007928:	6833      	ldreq	r3, [r6, #0]
 800792a:	1aed      	subeq	r5, r5, r3
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	bf0c      	ite	eq
 8007930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007934:	2500      	movne	r5, #0
 8007936:	4293      	cmp	r3, r2
 8007938:	bfc4      	itt	gt
 800793a:	1a9b      	subgt	r3, r3, r2
 800793c:	18ed      	addgt	r5, r5, r3
 800793e:	2600      	movs	r6, #0
 8007940:	341a      	adds	r4, #26
 8007942:	42b5      	cmp	r5, r6
 8007944:	d11a      	bne.n	800797c <_printf_common+0xc8>
 8007946:	2000      	movs	r0, #0
 8007948:	e008      	b.n	800795c <_printf_common+0xa8>
 800794a:	2301      	movs	r3, #1
 800794c:	4652      	mov	r2, sl
 800794e:	4641      	mov	r1, r8
 8007950:	4638      	mov	r0, r7
 8007952:	47c8      	blx	r9
 8007954:	3001      	adds	r0, #1
 8007956:	d103      	bne.n	8007960 <_printf_common+0xac>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	3501      	adds	r5, #1
 8007962:	e7c6      	b.n	80078f2 <_printf_common+0x3e>
 8007964:	18e1      	adds	r1, r4, r3
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	2030      	movs	r0, #48	@ 0x30
 800796a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800796e:	4422      	add	r2, r4
 8007970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007978:	3302      	adds	r3, #2
 800797a:	e7c7      	b.n	800790c <_printf_common+0x58>
 800797c:	2301      	movs	r3, #1
 800797e:	4622      	mov	r2, r4
 8007980:	4641      	mov	r1, r8
 8007982:	4638      	mov	r0, r7
 8007984:	47c8      	blx	r9
 8007986:	3001      	adds	r0, #1
 8007988:	d0e6      	beq.n	8007958 <_printf_common+0xa4>
 800798a:	3601      	adds	r6, #1
 800798c:	e7d9      	b.n	8007942 <_printf_common+0x8e>
	...

08007990 <_printf_i>:
 8007990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	7e0f      	ldrb	r7, [r1, #24]
 8007996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007998:	2f78      	cmp	r7, #120	@ 0x78
 800799a:	4691      	mov	r9, r2
 800799c:	4680      	mov	r8, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	469a      	mov	sl, r3
 80079a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079a6:	d807      	bhi.n	80079b8 <_printf_i+0x28>
 80079a8:	2f62      	cmp	r7, #98	@ 0x62
 80079aa:	d80a      	bhi.n	80079c2 <_printf_i+0x32>
 80079ac:	2f00      	cmp	r7, #0
 80079ae:	f000 80d1 	beq.w	8007b54 <_printf_i+0x1c4>
 80079b2:	2f58      	cmp	r7, #88	@ 0x58
 80079b4:	f000 80b8 	beq.w	8007b28 <_printf_i+0x198>
 80079b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079c0:	e03a      	b.n	8007a38 <_printf_i+0xa8>
 80079c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079c6:	2b15      	cmp	r3, #21
 80079c8:	d8f6      	bhi.n	80079b8 <_printf_i+0x28>
 80079ca:	a101      	add	r1, pc, #4	@ (adr r1, 80079d0 <_printf_i+0x40>)
 80079cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d0:	08007a29 	.word	0x08007a29
 80079d4:	08007a3d 	.word	0x08007a3d
 80079d8:	080079b9 	.word	0x080079b9
 80079dc:	080079b9 	.word	0x080079b9
 80079e0:	080079b9 	.word	0x080079b9
 80079e4:	080079b9 	.word	0x080079b9
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	080079b9 	.word	0x080079b9
 80079f0:	080079b9 	.word	0x080079b9
 80079f4:	080079b9 	.word	0x080079b9
 80079f8:	080079b9 	.word	0x080079b9
 80079fc:	08007b3b 	.word	0x08007b3b
 8007a00:	08007a67 	.word	0x08007a67
 8007a04:	08007af5 	.word	0x08007af5
 8007a08:	080079b9 	.word	0x080079b9
 8007a0c:	080079b9 	.word	0x080079b9
 8007a10:	08007b5d 	.word	0x08007b5d
 8007a14:	080079b9 	.word	0x080079b9
 8007a18:	08007a67 	.word	0x08007a67
 8007a1c:	080079b9 	.word	0x080079b9
 8007a20:	080079b9 	.word	0x080079b9
 8007a24:	08007afd 	.word	0x08007afd
 8007a28:	6833      	ldr	r3, [r6, #0]
 8007a2a:	1d1a      	adds	r2, r3, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6032      	str	r2, [r6, #0]
 8007a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e09c      	b.n	8007b76 <_printf_i+0x1e6>
 8007a3c:	6833      	ldr	r3, [r6, #0]
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	1d19      	adds	r1, r3, #4
 8007a42:	6031      	str	r1, [r6, #0]
 8007a44:	0606      	lsls	r6, r0, #24
 8007a46:	d501      	bpl.n	8007a4c <_printf_i+0xbc>
 8007a48:	681d      	ldr	r5, [r3, #0]
 8007a4a:	e003      	b.n	8007a54 <_printf_i+0xc4>
 8007a4c:	0645      	lsls	r5, r0, #25
 8007a4e:	d5fb      	bpl.n	8007a48 <_printf_i+0xb8>
 8007a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	da03      	bge.n	8007a60 <_printf_i+0xd0>
 8007a58:	232d      	movs	r3, #45	@ 0x2d
 8007a5a:	426d      	negs	r5, r5
 8007a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a60:	4858      	ldr	r0, [pc, #352]	@ (8007bc4 <_printf_i+0x234>)
 8007a62:	230a      	movs	r3, #10
 8007a64:	e011      	b.n	8007a8a <_printf_i+0xfa>
 8007a66:	6821      	ldr	r1, [r4, #0]
 8007a68:	6833      	ldr	r3, [r6, #0]
 8007a6a:	0608      	lsls	r0, r1, #24
 8007a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a70:	d402      	bmi.n	8007a78 <_printf_i+0xe8>
 8007a72:	0649      	lsls	r1, r1, #25
 8007a74:	bf48      	it	mi
 8007a76:	b2ad      	uxthmi	r5, r5
 8007a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a7a:	4852      	ldr	r0, [pc, #328]	@ (8007bc4 <_printf_i+0x234>)
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	bf14      	ite	ne
 8007a80:	230a      	movne	r3, #10
 8007a82:	2308      	moveq	r3, #8
 8007a84:	2100      	movs	r1, #0
 8007a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a8a:	6866      	ldr	r6, [r4, #4]
 8007a8c:	60a6      	str	r6, [r4, #8]
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	db05      	blt.n	8007a9e <_printf_i+0x10e>
 8007a92:	6821      	ldr	r1, [r4, #0]
 8007a94:	432e      	orrs	r6, r5
 8007a96:	f021 0104 	bic.w	r1, r1, #4
 8007a9a:	6021      	str	r1, [r4, #0]
 8007a9c:	d04b      	beq.n	8007b36 <_printf_i+0x1a6>
 8007a9e:	4616      	mov	r6, r2
 8007aa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007aa4:	fb03 5711 	mls	r7, r3, r1, r5
 8007aa8:	5dc7      	ldrb	r7, [r0, r7]
 8007aaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007aae:	462f      	mov	r7, r5
 8007ab0:	42bb      	cmp	r3, r7
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	d9f4      	bls.n	8007aa0 <_printf_i+0x110>
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d10b      	bne.n	8007ad2 <_printf_i+0x142>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	07df      	lsls	r7, r3, #31
 8007abe:	d508      	bpl.n	8007ad2 <_printf_i+0x142>
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	6861      	ldr	r1, [r4, #4]
 8007ac4:	4299      	cmp	r1, r3
 8007ac6:	bfde      	ittt	le
 8007ac8:	2330      	movle	r3, #48	@ 0x30
 8007aca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ace:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ad2:	1b92      	subs	r2, r2, r6
 8007ad4:	6122      	str	r2, [r4, #16]
 8007ad6:	f8cd a000 	str.w	sl, [sp]
 8007ada:	464b      	mov	r3, r9
 8007adc:	aa03      	add	r2, sp, #12
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	f7ff fee7 	bl	80078b4 <_printf_common>
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d14a      	bne.n	8007b80 <_printf_i+0x1f0>
 8007aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aee:	b004      	add	sp, #16
 8007af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	f043 0320 	orr.w	r3, r3, #32
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	4832      	ldr	r0, [pc, #200]	@ (8007bc8 <_printf_i+0x238>)
 8007afe:	2778      	movs	r7, #120	@ 0x78
 8007b00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	6831      	ldr	r1, [r6, #0]
 8007b08:	061f      	lsls	r7, r3, #24
 8007b0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b0e:	d402      	bmi.n	8007b16 <_printf_i+0x186>
 8007b10:	065f      	lsls	r7, r3, #25
 8007b12:	bf48      	it	mi
 8007b14:	b2ad      	uxthmi	r5, r5
 8007b16:	6031      	str	r1, [r6, #0]
 8007b18:	07d9      	lsls	r1, r3, #31
 8007b1a:	bf44      	itt	mi
 8007b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b20:	6023      	strmi	r3, [r4, #0]
 8007b22:	b11d      	cbz	r5, 8007b2c <_printf_i+0x19c>
 8007b24:	2310      	movs	r3, #16
 8007b26:	e7ad      	b.n	8007a84 <_printf_i+0xf4>
 8007b28:	4826      	ldr	r0, [pc, #152]	@ (8007bc4 <_printf_i+0x234>)
 8007b2a:	e7e9      	b.n	8007b00 <_printf_i+0x170>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f023 0320 	bic.w	r3, r3, #32
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	e7f6      	b.n	8007b24 <_printf_i+0x194>
 8007b36:	4616      	mov	r6, r2
 8007b38:	e7bd      	b.n	8007ab6 <_printf_i+0x126>
 8007b3a:	6833      	ldr	r3, [r6, #0]
 8007b3c:	6825      	ldr	r5, [r4, #0]
 8007b3e:	6961      	ldr	r1, [r4, #20]
 8007b40:	1d18      	adds	r0, r3, #4
 8007b42:	6030      	str	r0, [r6, #0]
 8007b44:	062e      	lsls	r6, r5, #24
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	d501      	bpl.n	8007b4e <_printf_i+0x1be>
 8007b4a:	6019      	str	r1, [r3, #0]
 8007b4c:	e002      	b.n	8007b54 <_printf_i+0x1c4>
 8007b4e:	0668      	lsls	r0, r5, #25
 8007b50:	d5fb      	bpl.n	8007b4a <_printf_i+0x1ba>
 8007b52:	8019      	strh	r1, [r3, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	6123      	str	r3, [r4, #16]
 8007b58:	4616      	mov	r6, r2
 8007b5a:	e7bc      	b.n	8007ad6 <_printf_i+0x146>
 8007b5c:	6833      	ldr	r3, [r6, #0]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	6032      	str	r2, [r6, #0]
 8007b62:	681e      	ldr	r6, [r3, #0]
 8007b64:	6862      	ldr	r2, [r4, #4]
 8007b66:	2100      	movs	r1, #0
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7f8 fb31 	bl	80001d0 <memchr>
 8007b6e:	b108      	cbz	r0, 8007b74 <_printf_i+0x1e4>
 8007b70:	1b80      	subs	r0, r0, r6
 8007b72:	6060      	str	r0, [r4, #4]
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b7e:	e7aa      	b.n	8007ad6 <_printf_i+0x146>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	4632      	mov	r2, r6
 8007b84:	4649      	mov	r1, r9
 8007b86:	4640      	mov	r0, r8
 8007b88:	47d0      	blx	sl
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d0ad      	beq.n	8007aea <_printf_i+0x15a>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	079b      	lsls	r3, r3, #30
 8007b92:	d413      	bmi.n	8007bbc <_printf_i+0x22c>
 8007b94:	68e0      	ldr	r0, [r4, #12]
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	4298      	cmp	r0, r3
 8007b9a:	bfb8      	it	lt
 8007b9c:	4618      	movlt	r0, r3
 8007b9e:	e7a6      	b.n	8007aee <_printf_i+0x15e>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4632      	mov	r2, r6
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	47d0      	blx	sl
 8007baa:	3001      	adds	r0, #1
 8007bac:	d09d      	beq.n	8007aea <_printf_i+0x15a>
 8007bae:	3501      	adds	r5, #1
 8007bb0:	68e3      	ldr	r3, [r4, #12]
 8007bb2:	9903      	ldr	r1, [sp, #12]
 8007bb4:	1a5b      	subs	r3, r3, r1
 8007bb6:	42ab      	cmp	r3, r5
 8007bb8:	dcf2      	bgt.n	8007ba0 <_printf_i+0x210>
 8007bba:	e7eb      	b.n	8007b94 <_printf_i+0x204>
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	f104 0619 	add.w	r6, r4, #25
 8007bc2:	e7f5      	b.n	8007bb0 <_printf_i+0x220>
 8007bc4:	08007f85 	.word	0x08007f85
 8007bc8:	08007f96 	.word	0x08007f96

08007bcc <__sflush_r>:
 8007bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	0716      	lsls	r6, r2, #28
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	d454      	bmi.n	8007c86 <__sflush_r+0xba>
 8007bdc:	684b      	ldr	r3, [r1, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dc02      	bgt.n	8007be8 <__sflush_r+0x1c>
 8007be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dd48      	ble.n	8007c7a <__sflush_r+0xae>
 8007be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	d045      	beq.n	8007c7a <__sflush_r+0xae>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bf4:	682f      	ldr	r7, [r5, #0]
 8007bf6:	6a21      	ldr	r1, [r4, #32]
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	d030      	beq.n	8007c5e <__sflush_r+0x92>
 8007bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	0759      	lsls	r1, r3, #29
 8007c02:	d505      	bpl.n	8007c10 <__sflush_r+0x44>
 8007c04:	6863      	ldr	r3, [r4, #4]
 8007c06:	1ad2      	subs	r2, r2, r3
 8007c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c0a:	b10b      	cbz	r3, 8007c10 <__sflush_r+0x44>
 8007c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	2300      	movs	r3, #0
 8007c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c14:	6a21      	ldr	r1, [r4, #32]
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b0      	blx	r6
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	d106      	bne.n	8007c2e <__sflush_r+0x62>
 8007c20:	6829      	ldr	r1, [r5, #0]
 8007c22:	291d      	cmp	r1, #29
 8007c24:	d82b      	bhi.n	8007c7e <__sflush_r+0xb2>
 8007c26:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd0 <__sflush_r+0x104>)
 8007c28:	40ca      	lsrs	r2, r1
 8007c2a:	07d6      	lsls	r6, r2, #31
 8007c2c:	d527      	bpl.n	8007c7e <__sflush_r+0xb2>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	6062      	str	r2, [r4, #4]
 8007c32:	04d9      	lsls	r1, r3, #19
 8007c34:	6922      	ldr	r2, [r4, #16]
 8007c36:	6022      	str	r2, [r4, #0]
 8007c38:	d504      	bpl.n	8007c44 <__sflush_r+0x78>
 8007c3a:	1c42      	adds	r2, r0, #1
 8007c3c:	d101      	bne.n	8007c42 <__sflush_r+0x76>
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	b903      	cbnz	r3, 8007c44 <__sflush_r+0x78>
 8007c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c46:	602f      	str	r7, [r5, #0]
 8007c48:	b1b9      	cbz	r1, 8007c7a <__sflush_r+0xae>
 8007c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d002      	beq.n	8007c58 <__sflush_r+0x8c>
 8007c52:	4628      	mov	r0, r5
 8007c54:	f7ff fbf4 	bl	8007440 <_free_r>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c5c:	e00d      	b.n	8007c7a <__sflush_r+0xae>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b0      	blx	r6
 8007c64:	4602      	mov	r2, r0
 8007c66:	1c50      	adds	r0, r2, #1
 8007c68:	d1c9      	bne.n	8007bfe <__sflush_r+0x32>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0c6      	beq.n	8007bfe <__sflush_r+0x32>
 8007c70:	2b1d      	cmp	r3, #29
 8007c72:	d001      	beq.n	8007c78 <__sflush_r+0xac>
 8007c74:	2b16      	cmp	r3, #22
 8007c76:	d11e      	bne.n	8007cb6 <__sflush_r+0xea>
 8007c78:	602f      	str	r7, [r5, #0]
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	e022      	b.n	8007cc4 <__sflush_r+0xf8>
 8007c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	e01b      	b.n	8007cbe <__sflush_r+0xf2>
 8007c86:	690f      	ldr	r7, [r1, #16]
 8007c88:	2f00      	cmp	r7, #0
 8007c8a:	d0f6      	beq.n	8007c7a <__sflush_r+0xae>
 8007c8c:	0793      	lsls	r3, r2, #30
 8007c8e:	680e      	ldr	r6, [r1, #0]
 8007c90:	bf08      	it	eq
 8007c92:	694b      	ldreq	r3, [r1, #20]
 8007c94:	600f      	str	r7, [r1, #0]
 8007c96:	bf18      	it	ne
 8007c98:	2300      	movne	r3, #0
 8007c9a:	eba6 0807 	sub.w	r8, r6, r7
 8007c9e:	608b      	str	r3, [r1, #8]
 8007ca0:	f1b8 0f00 	cmp.w	r8, #0
 8007ca4:	dde9      	ble.n	8007c7a <__sflush_r+0xae>
 8007ca6:	6a21      	ldr	r1, [r4, #32]
 8007ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007caa:	4643      	mov	r3, r8
 8007cac:	463a      	mov	r2, r7
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b0      	blx	r6
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	dc08      	bgt.n	8007cc8 <__sflush_r+0xfc>
 8007cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc8:	4407      	add	r7, r0
 8007cca:	eba8 0800 	sub.w	r8, r8, r0
 8007cce:	e7e7      	b.n	8007ca0 <__sflush_r+0xd4>
 8007cd0:	20400001 	.word	0x20400001

08007cd4 <_fflush_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	4605      	mov	r5, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b913      	cbnz	r3, 8007ce4 <_fflush_r+0x10>
 8007cde:	2500      	movs	r5, #0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	b118      	cbz	r0, 8007cee <_fflush_r+0x1a>
 8007ce6:	6a03      	ldr	r3, [r0, #32]
 8007ce8:	b90b      	cbnz	r3, 8007cee <_fflush_r+0x1a>
 8007cea:	f7ff f9af 	bl	800704c <__sinit>
 8007cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0f3      	beq.n	8007cde <_fflush_r+0xa>
 8007cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cf8:	07d0      	lsls	r0, r2, #31
 8007cfa:	d404      	bmi.n	8007d06 <_fflush_r+0x32>
 8007cfc:	0599      	lsls	r1, r3, #22
 8007cfe:	d402      	bmi.n	8007d06 <_fflush_r+0x32>
 8007d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d02:	f7ff fb9a 	bl	800743a <__retarget_lock_acquire_recursive>
 8007d06:	4628      	mov	r0, r5
 8007d08:	4621      	mov	r1, r4
 8007d0a:	f7ff ff5f 	bl	8007bcc <__sflush_r>
 8007d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d10:	07da      	lsls	r2, r3, #31
 8007d12:	4605      	mov	r5, r0
 8007d14:	d4e4      	bmi.n	8007ce0 <_fflush_r+0xc>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	059b      	lsls	r3, r3, #22
 8007d1a:	d4e1      	bmi.n	8007ce0 <_fflush_r+0xc>
 8007d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d1e:	f7ff fb8d 	bl	800743c <__retarget_lock_release_recursive>
 8007d22:	e7dd      	b.n	8007ce0 <_fflush_r+0xc>

08007d24 <__swhatbuf_r>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	460c      	mov	r4, r1
 8007d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	b096      	sub	sp, #88	@ 0x58
 8007d30:	4615      	mov	r5, r2
 8007d32:	461e      	mov	r6, r3
 8007d34:	da0d      	bge.n	8007d52 <__swhatbuf_r+0x2e>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d3c:	f04f 0100 	mov.w	r1, #0
 8007d40:	bf14      	ite	ne
 8007d42:	2340      	movne	r3, #64	@ 0x40
 8007d44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d48:	2000      	movs	r0, #0
 8007d4a:	6031      	str	r1, [r6, #0]
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	b016      	add	sp, #88	@ 0x58
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
 8007d52:	466a      	mov	r2, sp
 8007d54:	f000 f848 	bl	8007de8 <_fstat_r>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	dbec      	blt.n	8007d36 <__swhatbuf_r+0x12>
 8007d5c:	9901      	ldr	r1, [sp, #4]
 8007d5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d66:	4259      	negs	r1, r3
 8007d68:	4159      	adcs	r1, r3
 8007d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d6e:	e7eb      	b.n	8007d48 <__swhatbuf_r+0x24>

08007d70 <__smakebuf_r>:
 8007d70:	898b      	ldrh	r3, [r1, #12]
 8007d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d74:	079d      	lsls	r5, r3, #30
 8007d76:	4606      	mov	r6, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	d507      	bpl.n	8007d8c <__smakebuf_r+0x1c>
 8007d7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	2301      	movs	r3, #1
 8007d86:	6163      	str	r3, [r4, #20]
 8007d88:	b003      	add	sp, #12
 8007d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d8c:	ab01      	add	r3, sp, #4
 8007d8e:	466a      	mov	r2, sp
 8007d90:	f7ff ffc8 	bl	8007d24 <__swhatbuf_r>
 8007d94:	9f00      	ldr	r7, [sp, #0]
 8007d96:	4605      	mov	r5, r0
 8007d98:	4639      	mov	r1, r7
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff fbbc 	bl	8007518 <_malloc_r>
 8007da0:	b948      	cbnz	r0, 8007db6 <__smakebuf_r+0x46>
 8007da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da6:	059a      	lsls	r2, r3, #22
 8007da8:	d4ee      	bmi.n	8007d88 <__smakebuf_r+0x18>
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	f043 0302 	orr.w	r3, r3, #2
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	e7e2      	b.n	8007d7c <__smakebuf_r+0xc>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	6020      	str	r0, [r4, #0]
 8007dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	9b01      	ldr	r3, [sp, #4]
 8007dc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dc6:	b15b      	cbz	r3, 8007de0 <__smakebuf_r+0x70>
 8007dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 f81d 	bl	8007e0c <_isatty_r>
 8007dd2:	b128      	cbz	r0, 8007de0 <__smakebuf_r+0x70>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	f043 0301 	orr.w	r3, r3, #1
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	431d      	orrs	r5, r3
 8007de4:	81a5      	strh	r5, [r4, #12]
 8007de6:	e7cf      	b.n	8007d88 <__smakebuf_r+0x18>

08007de8 <_fstat_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	@ (8007e08 <_fstat_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f7f8 fdca 	bl	800098e <_fstat>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_fstat_r+0x1c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_fstat_r+0x1c>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	20001e9c 	.word	0x20001e9c

08007e0c <_isatty_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	@ (8007e28 <_isatty_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f8 fdc9 	bl	80009ae <_isatty>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_isatty_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_isatty_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20001e9c 	.word	0x20001e9c

08007e2c <_sbrk_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d06      	ldr	r5, [pc, #24]	@ (8007e48 <_sbrk_r+0x1c>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4608      	mov	r0, r1
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	f7f8 fdd2 	bl	80009e0 <_sbrk>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_sbrk_r+0x1a>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_sbrk_r+0x1a>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	20001e9c 	.word	0x20001e9c

08007e4c <_init>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr

08007e58 <_fini>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr
